[{"path":[]},{"path":"https://leoniedu.github.io/comexstatr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"https://leoniedu.github.io/comexstatr/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"https://leoniedu.github.io/comexstatr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eduardo Leoni. Author, maintainer.","code":""},{"path":"https://leoniedu.github.io/comexstatr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Leoni E (2024). comexstatr: Access brazilian foreign trade data- Comexstat.. R package version 0.0.1, https://leoniedu.github.io/comexstatr/, https://github.com/leoniedu/comexstatr.","code":"@Manual{,   title = {comexstatr: Access to brazilian foreign trade data- Comexstat.},   author = {Eduardo Leoni},   year = {2024},   note = {R package version 0.0.1, https://leoniedu.github.io/comexstatr/},   url = {https://github.com/leoniedu/comexstatr}, }"},{"path":"https://leoniedu.github.io/comexstatr/index.html","id":"comexstatr","dir":"","previous_headings":"","what":"Access to brazilian foreign trade data- Comexstat.","title":"Access to brazilian foreign trade data- Comexstat.","text":"goal comexstatr make easy download, process, analyze Brazilian foreign trade statistics, available web app http://comexstat.mdic.gov.br/, using underlying bulk data https://www.gov.br/produtividade-e-comercio-exterior/pt-br/assuntos/comercio-exterior/estatisticas/base-de-dados-bruta.","code":""},{"path":"https://leoniedu.github.io/comexstatr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access to brazilian foreign trade data- Comexstat.","text":"problems installing arrow, see: https://arrow.apache.org/docs/r/articles/install.html","code":"##devtools::install_github(\"leoniedu/comexstatr\")"},{"path":"https://leoniedu.github.io/comexstatr/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Access to brazilian foreign trade data- Comexstat.","text":"Automatic downloading can tricky, due timeout, (lack ) valid security certificates Brazilian government websites, along issues. code uses multi_download function curl library, resumes download fails.","code":"library(comexstatr) library(dplyr) ##  ## Attaching package: 'dplyr'  ## The following objects are masked from 'package:stats': ##  ##     filter, lag  ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union ##downloading #comexstat_download(years = 2022:2024, types = \"ncm\", ssl_verifypeer=FALSE) try(comexstat_download(years = 2022:2024, types = \"ncm\"                        , ssl_verifypeer=FALSE                        ))"},{"path":"https://leoniedu.github.io/comexstatr/index.html","id":"main-trade-partners-treating-countries-in-mercosul-and-european-union-as-blocks","dir":"","previous_headings":"Examples","what":"Main trade partners, treating countries in Mercosul and European Union as blocks.","title":"Access to brazilian foreign trade data- Comexstat.","text":"Using programming language like R makes easy generate statistics reports intended level analysis.","code":"msul <- comexstat(\"pais_bloco\")|>   filter(block_code==111)|>   pull(country_code) eu <- comexstat(\"pais_bloco\")|>   filter(block_code==22)|>   pull(country_code)  pb <- comexstat(\"pais\")|>   transmute(country_code,              partner=               case_when(country_code%in%msul ~ \"Mercosul\",                         country_code%in%eu ~ \"European Union\",                         TRUE ~ country_name)               )  cstat_top_0 <- comexstat_ncm()|>   left_join(pb) |>    #filter(co_ano>=2017)|>   group_by(partner)|>   summarise(fob_usd=sum(fob_usd))|>   ungroup() |>    arrange(desc(fob_usd))|>   collect()|>   slice(1:5)  cstat_top <- comexstat_ncm() |>   left_join(pb) |>    #filter(co_ano>=2017)|>   semi_join(cstat_top_0, by=c(\"partner\"))|>   group_by(year, partner, direction)|>   summarise(fob_usd=sum(fob_usd))|>   collect()  library(ggplot2) ggplot(aes(x=year,             y=fob_usd_bi),         data=cstat_top|>          filter(year<=2023)|>          mutate(fob_usd_bi=fob_usd/1e9)) +   geom_line(aes(color=partner)) +   facet_wrap(~direction) +   labs(color=\"\", x=\"\", y=\"US$ Bi (FOB)\") +   theme_linedraw() + theme(legend.position=\"bottom\")"},{"path":"https://leoniedu.github.io/comexstatr/index.html","id":"imports-and-exports-by-brazilian-state","dir":"","previous_headings":"Examples","what":"Imports and exports by Brazilian state","title":"Access to brazilian foreign trade data- Comexstat.","text":"access information available via web interface http://comexstat.mdic.gov.br/en/home, ","code":"bystate <- comexstat_ncm() |>    filter(year<=2023) |>   group_by(state_abb, year, direction)|>   summarise(fob_usd=sum(fob_usd))|>   collect()  topstate <- bystate|>   group_by(state_abb)|>   summarise(fob_usd=sum(fob_usd))|>   arrange(-fob_usd)|>   head(3)   ggplot(aes(x=year, y=fob_usd_bi, color=state_abb),         data=bystate|>         semi_join(topstate, by=\"state_abb\")|>         mutate(fob_usd_bi=fob_usd/1e9)) +   geom_line() +   facet_wrap(~direction) +   labs(color=\"\", x=\"\", y=\"US$ Bi (FOB)\") +   theme_linedraw() + theme(legend.position=\"bottom\")"},{"path":"https://leoniedu.github.io/comexstatr/index.html","id":"deflate-using-cpi-for-usd-or-ipca-for-brl-experimental","dir":"","previous_headings":"","what":"Deflate using CPI (for USD) or IPCA (for BRL) (Experimental)","title":"Access to brazilian foreign trade data- Comexstat.","text":"","code":"selected_deflated <- comexstat_ncm()%>%   filter(country_code%in%c(249, 160, 63))%>%   group_by(direction, date, country_code)%>%   summarise(fob_usd=sum(fob_usd), cif_usd=sum(cif_usd, na.rm=TRUE))%>%   comexstat_deflated()%>%   collect()  selected_deflated_r <- selected_deflated%>%   left_join(comexstat(\"pais\"))%>%   group_by(direction, country_name)%>%   arrange(date)%>%   filter(!is.na(fob_usd))%>%   mutate(fob_usd_constant_bi=            slider::slide_index_dbl(.x=fob_usd_constant,                                     .before = months(11),                                    .complete = TRUE,                                    .f = function(z) sum(z, na.rm=TRUE), .i = date)/1e9) ## Joining with `by = join_by(country_code)` ggplot(aes(x=date, y=fob_usd_constant_bi, color=country_name),         data=selected_deflated_r)+   facet_wrap(~direction)+   geom_line() +   labs(color=\"\", x=\"\", y=\"US$ Bi (FOB) Deflated by CPI \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\") +   theme_linedraw() + theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\")) ## Warning: Removed 33 rows containing missing values (`geom_line()`)."},{"path":"https://leoniedu.github.io/comexstatr/index.html","id":"trade-balance","dir":"","previous_headings":"","what":"Trade balance","title":"Access to brazilian foreign trade data- Comexstat.","text":"","code":"balance_deflated <- comexstat_ncm()%>%   group_by(direction, date)%>%   summarise(fob_usd=sum(fob_usd), cif_usd=sum(cif_usd, na.rm=TRUE), qt_stat=sum(qt_stat, na.rm=TRUE))%>%   comexstat_deflated()%>%   collect()  library(runner) nperiods <- 11 balance_deflated_r <- balance_deflated%>%   group_by(direction)%>%   arrange(date)%>%   filter(!is.na(fob_usd_constant))%>%   mutate(     fob_usd_bi=       slider::slide_index_dbl(.x=fob_usd,                                .before = months(nperiods),                               .complete = TRUE,                               .f = function(z) sum(z, na.rm=TRUE), .i = date)/1e9,     fob_brl_bi=       slider::slide_index_dbl(.x=fob_usd*brlusd,                                .before = months(nperiods),                               .complete = TRUE,                               .f = function(z) sum(z, na.rm=TRUE), .i = date)/1e9,     fob_usd_constant_bi=       slider::slide_index_dbl(.x=fob_usd_constant,                                .before = months(nperiods),                               .complete = TRUE,                               .f = function(z) sum(z, na.rm=TRUE), .i = date)/1e9,     fob_brl_constant_bi=       slider::slide_index_dbl(.x=fob_brl_constant,                                .before = months(nperiods),                               .complete = TRUE,                               .f = function(z) sum(z, na.rm=TRUE), .i = date)/1e9   )%>%   mutate(fob_usd_constant_bi_i=fob_usd_constant_bi/fob_usd_constant_bi[date==as.Date(\"2022-01-01\")])  volume_deflated_r <- balance_deflated_r%>%   group_by(date)%>%   summarise(across(matches(\"^(fob|cif|qt)\"), sum))  ggplot(aes(x=date, y=fob_usd_constant_bi, color=direction),         data=balance_deflated_r) +   scale_color_manual(values=c(\"blue\", \"red\")) +   geom_line() +   labs(color=\"\", x=\"\", y=\"US$ Bi (FOB) Deflated by CPI \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\") +   theme_linedraw() +    geom_vline(xintercept=as.Date(\"2023-01-01\"))+   theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\")) ## Warning: Removed 22 rows containing missing values (`geom_line()`). usdmax <- balance_deflated_r%>%   group_by(direction)%>%   arrange(desc(fob_usd_constant_bi))%>%   slice(1)  ggplot(aes(x=date, y=fob_usd_constant_bi, color=direction),         data=balance_deflated_r) +   geom_line(aes(y=fob_usd_bi), linetype=2) +   scale_color_manual(values=c(\"blue\", \"red\")) +   geom_line() +   #geom_line(aes(y=vl_fob_usd_bi), linetype='dashed')+   labs(color=\"\", x=\"\", y=\"USD Bi (FOB) Deflated by CPI \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\", title=\"Deflated by CPI vs Nominal\",        subtitle = glue::glue(\"Max of 12 month exports value occurred on {usdmax%>%filter(direction=='exp')%>%pull(date)},\\n imports on {usdmax%>%filter(direction=='imp')%>%pull(date)}\")) +   theme_linedraw() +    geom_vline(xintercept=as.Date(\"2023-01-01\"))+   theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\")) ## Warning: Removed 22 rows containing missing values (`geom_line()`). ## Removed 22 rows containing missing values (`geom_line()`). brlmax <- balance_deflated_r%>%   group_by(direction)%>%   arrange(desc(fob_brl_constant_bi))%>%   slice(1)  ggplot(aes(x=date, y=fob_brl_constant_bi, color=direction),         data=balance_deflated_r) +   scale_color_manual(values=c(\"blue\", \"red\")) +   geom_line() +   #geom_line(aes(y=vl_fob_usd_bi), linetype='dashed')+   labs(color=\"\", x=\"\", y=\"R$ Bi (FOB) Deflated by IPCA \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\", title=\"Deflated by IPCA\",        subtitle = glue::glue(\"Max of 12 month exports value occurred on {brlmax%>%filter(direction=='exp')%>%pull(date)},\\n imports on {brlmax%>%filter(direction=='imp')%>%pull(date)}\")) +   theme_linedraw() +    geom_vline(xintercept=as.Date(\"2023-01-01\"))+   theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\")) ## Warning: Removed 22 rows containing missing values (`geom_line()`)."},{"path":"https://leoniedu.github.io/comexstatr/index.html","id":"last-month","dir":"","previous_headings":"Trade balance","what":"Last month","title":"Access to brazilian foreign trade data- Comexstat.","text":"","code":"ggplot(aes(x=date, y=fob_brl_constant_bi, color=direction),         data=balance_deflated_r%>%filter(lubridate::month(date)==lubridate::month(max(balance_deflated_r$date)))        ) +   scale_color_manual(values=c(\"blue\", \"red\")) +   geom_line() +   geom_line(aes(y=fob_brl_bi), linetype='dashed') +   #geom_point(aes(y=fob_brl_bi), linetype='dashed') +   labs(color=\"\", x=\"\", y=\"R$ Bi (FOB) Deflated by IPCA \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\") +   theme_linedraw() +    geom_vline(xintercept=as.Date(\"2024-01-01\"))+   theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\")) ## Warning: Removed 2 rows containing missing values (`geom_line()`). ## Removed 2 rows containing missing values (`geom_line()`). ggplot(aes(x=date, y=balance_usd_constant),         data=          balance_deflated_r%>%          group_by(date)%>%          arrange(desc(direction))%>%          summarise(balance_usd_constant=fob_usd_constant_bi[2]-fob_usd_constant_bi[1])%>%          na.omit()                    )+   #scale_color_manual(values=c(\"blue\", \"red\")) +   geom_line()  +   labs(color=\"\", x=\"\", y=\"USD$ Bi (FOB) Deflated by CPI \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\") +   theme_linedraw() +    theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\"))"},{"path":"https://leoniedu.github.io/comexstatr/index.html","id":"brl","dir":"","previous_headings":"Trade balance","what":"BRL","title":"Access to brazilian foreign trade data- Comexstat.","text":"","code":"ggplot(aes(x=date, y=balance_brl_constant),         data=          balance_deflated_r%>%          group_by(date)%>%          arrange(desc(direction))%>%          summarise(balance_brl_constant=fob_brl_constant_bi[2]-fob_brl_constant_bi[1])%>%          na.omit()                    )+   #scale_color_manual(values=c(\"blue\", \"red\")) +   geom_line()  +   labs(color=\"\", x=\"\", y=\"R$ Bi (FOB) Deflated by CPI \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\") +   theme_linedraw() +    theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\"))"},{"path":"https://leoniedu.github.io/comexstatr/index.html","id":"by-cgce","dir":"","previous_headings":"","what":"By CGCE","title":"Access to brazilian foreign trade data- Comexstat.","text":"","code":"by_cat <- comexstat_ncm() |>    filter(year>=2022          ## usa          #, country_code==249          ## china          , country_code==160          ) |>   left_join(ncms()%>%select(ncm=co_ncm,                              name=no_cgce_n3_ing, code=co_cgce_n3                             #name=no_ncm_ing, code=co_ncm                             ))|>   group_by(name,code, direction, year)|>   summarise(fob_usd=sum(fob_usd))|>   collect()|>   tidyr::pivot_wider(names_from=c(\"direction\", \"year\"), values_from = fob_usd)%>%   mutate(ep=exp_2023-exp_2022-1, ip=imp_2023-imp_2022-1, si=imp_2022+imp_2023)%>%   arrange(desc(si))%>%   head(10) ggplot(aes(y=paste0(code, \": \", substr(name,1,40)), x=as.numeric(ip)/1e9), data=by_cat%>%mutate(code=forcats::fct_inseq(code))) + geom_col() + labs(x=\"\", y=\"\")"},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat.html","id":null,"dir":"Reference","previous_headings":"","what":"Note that arrow only accepts a subset of the dplyr functions. The remaining tables are read from the original csv files. — comexstat","title":"Note that arrow only accepts a subset of the dplyr functions. The remaining tables are read from the original csv files. — comexstat","text":"Note arrow accepts subset dplyr functions. remaining tables read original csv files.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Note that arrow only accepts a subset of the dplyr functions. The remaining tables are read from the original csv files. — comexstat","text":"","code":"comexstat(table, ...)"},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Note that arrow only accepts a subset of the dplyr functions. The remaining tables are read from the original csv files. — comexstat","text":"","code":"comexstat_download() #> Try #2! #> Try #3! #> Try #4! #> Try #5! #> Try #6! #> Try #7! #> Try #8! #> Try #9! #> Try #10! #> Try #11! #> Try #12! #> Try #13! #> Try #14! #> Try #15! #> Try #16! #> Try #17! #> Try #18! #> Try #19! #> Try #20! #> Try #21! #> Try #22! #> Try #23! #> Try #24! #> Try #25! #> Try #26! #> Try #27! #> Try #28! #> Try #29! #> Try #30! #> Error in comexstat_download(): Error downloading data. comexstat(\"ncm\")|>head() #> Error: '/home/runner/.cache/comexstatr/ncm.csv' does not exist."},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_deflated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deflate comexstat series — comexstat_deflated","title":"Deflate comexstat series — comexstat_deflated","text":"Deflate comexstat series","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_deflated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deflate comexstat series — comexstat_deflated","text":"","code":"comexstat_deflated(   data = comexstat_ncm(),   basedate = NULL,   deflators = get_deflators(na_omit = TRUE) )"},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_deflated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deflate comexstat series — comexstat_deflated","text":"data trade data deflate basedate base date deflate . deflators data.frame deflators","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_deflated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deflate comexstat series — comexstat_deflated","text":"deflated data. #' @examples library(dplyr) total_trade <- comexstat_ncm()%>%group_by(year, date)%>%summarise(fob_usd=sum(fob_usd))%>%comexstat_deflated()%>%group_by(year)%>%summarise(fob_usd=sum(fob_usd),fob_usd_constant=sum(fob_usd_constant))%>%collect() total_trade%>%select(year, fob_usd, fob_usd_constant)%>%arrange(desc(fob_usd_constant))","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_download.html","id":null,"dir":"Reference","previous_headings":"","what":"This function downloads Brazilian international trade data (ComexStat) from the Ministry of Economy's website. It supports various data types, years, and trade directions. — comexstat_download","title":"This function downloads Brazilian international trade data (ComexStat) from the Ministry of Economy's website. It supports various data types, years, and trade directions. — comexstat_download","text":"function downloads Brazilian international trade data (ComexStat) Ministry Economy's website. supports various data types, years, trade directions.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function downloads Brazilian international trade data (ComexStat) from the Ministry of Economy's website. It supports various data types, years, and trade directions. — comexstat_download","text":"","code":"comexstat_download(   years = 2023:2024,   directions = c(\"imp\", \"exp\"),   types = c(\"ncm\", \"hs4\"),   download_aux = TRUE,   cache = TRUE,   .progress = TRUE,   n_tries = 30,   ... )"},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function downloads Brazilian international trade data (ComexStat) from the Ministry of Economy's website. It supports various data types, years, and trade directions. — comexstat_download","text":"years Numeric vector years download data (default: 1997:1998). directions Character vector indicating trade directions: \"imp\" imports, \"exp\" exports (default: c(\"imp\", \"exp\")). types Character vector specifying data types: \"ncm\" 8-digit product codes, \"hs4\" 4-digit product codes (default: c(\"ncm\", \"hs4\")). download_aux Logical indicating whether download auxiliary data files (default: TRUE). cache Logical indicating whether resume incomplete downloads previous attempts (default: TRUE). .progress Logical indicating whether display progress bar downloads (default: TRUE). n_tries Integer specifying maximum number download attempts","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function downloads Brazilian international trade data (ComexStat) from the Ministry of Economy's website. It supports various data types, years, and trade directions. — comexstat_download","text":"Downloads data files ComexStat data directory. Returns invisibly logical vector indicating success download.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_download.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"This function downloads Brazilian international trade data (ComexStat) from the Ministry of Economy's website. It supports various data types, years, and trade directions. — comexstat_download","text":"downloaded data files saved CSV format. file names structured follows: HS4 data: \"__mun.csv\" (e.g., \"imp_1997_mun.csv\") NCM data: \"_.csv\" (e.g., \"exp_1998.csv\")","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function downloads Brazilian international trade data (ComexStat) from the Ministry of Economy's website. It supports various data types, years, and trade directions. — comexstat_download","text":"","code":"if (FALSE) { # Download import and export data for 1997-1998 in both NCM and HS4 formats: comexstat_download()  # Download only import data for 2020-2022 in NCM format: comexstat_download(years = 2020:2022, directions = \"imp\", types = \"ncm\") }"},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_hs4.html","id":null,"dir":"Reference","previous_headings":"","what":"Open ComexStat HS4 Trade Dataset — comexstat_hs4","title":"Open ComexStat HS4 Trade Dataset — comexstat_hs4","text":"function opens ComexStat HS4 trade data Arrow Dataset. data assumed located ComexStat data directory downloaded using comexstat_download() function.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_hs4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open ComexStat HS4 Trade Dataset — comexstat_hs4","text":"","code":"comexstat_hs4()"},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_hs4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open ComexStat HS4 Trade Dataset — comexstat_hs4","text":"Arrow Dataset containing combined import export HS4 trade data. dataset following columns: year: Year (integer) month: Month (integer) hs4: 4-digit HS product code (integer) country_code: Country code (integer) state: Brazilian state abbreviation (string) mun_code: Municipality code (integer) kg_net: Net weight kilograms (integer64) fob_usd: FOB value US dollars (integer64) direction: Trade direction, either \"exp\" (export) \"imp\" (import)","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_hs4.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Open ComexStat HS4 Trade Dataset — comexstat_hs4","text":"function assumes HS4 data files named according following pattern: Imports: \"imp_year_mun.csv\" (e.g., \"imp_2023_mun.csv\") Exports: \"exp_year_mun.csv\" (e.g., \"exp_2023_mun.csv\")","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_hs4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open ComexStat HS4 Trade Dataset — comexstat_hs4","text":"","code":"if (FALSE) { # Open the ComexStat HS4 dataset: hs4_dataset <- comexstat_hs4()  # Explore the dataset: print(hs4_dataset) }"},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_ncm.html","id":null,"dir":"Reference","previous_headings":"","what":"Open ComexStat NCM Trade Dataset — comexstat_ncm","title":"Open ComexStat NCM Trade Dataset — comexstat_ncm","text":"function opens ComexStat NCM (8-digit product code) trade data Arrow Dataset. data assumed located  ComexStat data directory downloaded using comexstat_download() function.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_ncm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open ComexStat NCM Trade Dataset — comexstat_ncm","text":"","code":"comexstat_ncm()"},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_ncm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open ComexStat NCM Trade Dataset — comexstat_ncm","text":"Arrow Dataset containing combined import export NCM trade data, additional direction column indicating \"exp\" (export) \"imp\" (import). dataset following columns: year: Year (integer) month: Month (integer) ncm: 8-digit NCM product code (string) unit_code: Unit measurement code (integer) country_code: Country code (integer) state_abb: Brazilian state abbreviation (string) transp_mode_code: Transportation mode code (integer) urf_code: Customs clearance unit code (integer) qt_stat: Statistical quantity (integer64) kg_net: Net weight kilograms (integer64) fob_usd: FOB value US dollars (integer64) freight_usd: Freight value US dollars (integer64, imports) insurance_usd: Insurance value US dollars (integer64, imports) direction: Trade direction, either \"exp\" (export) \"imp\" (import) (derived)","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_ncm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Open ComexStat NCM Trade Dataset — comexstat_ncm","text":"function assumes NCM data files named according following pattern: Imports: \"imp_year.csv\" (e.g., \"imp_2023.csv\") Exports: \"exp_year.csv\" (e.g., \"exp_2023.csv\") infers trade direction based presence absence freight_usd column (present imports).","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_ncm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open ComexStat NCM Trade Dataset — comexstat_ncm","text":"","code":"if (FALSE) { library(dplyr) # Open the ComexStat NCM dataset: ncm_dataset <- comexstat_ncm()  # Explore the dataset: print(ncm_dataset) ncm_dataset|>group_by(year, direction)|>summarise(fob_usd=sum(fob_usd), freight_usd=sum(freight_usd))|>mutate(p=freight_usd/fob_usd)|>collect() comexstat_ncm()|>group_by(country_code)|>summarise(fob_usd=sum(fob_usd, na.rm=TRUE), freight_usd=sum(freight_usd))|>mutate(p=freight_usd/fob_usd)|>arrange(desc(p))|>collect() }"},{"path":"https://leoniedu.github.io/comexstatr/reference/get_deflators.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USE) — get_deflators","title":"Download and processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USE) — get_deflators","text":"Download processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USE) Download processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USE)","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/get_deflators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USE) — get_deflators","text":"","code":"get_deflators(updated = Sys.Date(), na_omit = FALSE)  get_deflators(updated = Sys.Date(), na_omit = FALSE)"},{"path":"https://leoniedu.github.io/comexstatr/reference/get_deflators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USE) — get_deflators","text":"updated","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/get_deflators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USE) — get_deflators","text":"data frame columns co_ano_mes (date), ipca (monthly inflation Brazil), ipca_i (monthly inflation Brazil indexed 1997-01-01 1), cpi index (monthly inflation USA). data frame columns co_ano_mes (date), ipca (monthly inflation Brazil), ipca_i (monthly inflation Brazil indexed 1997-01-01 1), cpi index (monthly inflation USA).","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/ncms.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads and merges all comexstat files with information about NCM — ncms","title":"Reads and merges all comexstat files with information about NCM — ncms","text":"Reads merges comexstat files information  NCM","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/ncms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads and merges all comexstat files with information about NCM — ncms","text":"","code":"ncms()"},{"path":"https://leoniedu.github.io/comexstatr/reference/ncms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads and merges all comexstat files with information about NCM — ncms","text":"data.frame/tibble","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/ncms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reads and merges all comexstat files with information about NCM — ncms","text":"reads following files:  ncm, ncm_cgce, ncm_cuci, ncm_isic, ncm_unidade joins single tibble","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/ncms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads and merges all comexstat files with information about NCM — ncms","text":"","code":"ncms() #> Error in purrr::map(c(\"ncm\", \"ncm_cgce\", \"ncm_cuci\", \"ncm_isic\", \"ncm_unidade\"),     comexstat): ℹ In index: 1. #> Caused by error: #> ! '/home/runner/.cache/comexstatr/ncm.csv' does not exist."},{"path":"https://leoniedu.github.io/comexstatr/news/index.html","id":"version-01","dir":"Changelog","previous_headings":"","what":"Version 0.1","title":"Version 0.1","text":"First release","code":""}]
