[{"path":[]},{"path":"https://leoniedu.github.io/comexstatr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"https://leoniedu.github.io/comexstatr/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"https://leoniedu.github.io/comexstatr/articles/comexstatr.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"comexstatr","text":"problems installing arrow, see: https://arrow.apache.org/docs/r/articles/install.html","code":"##devtools::install_github(\"leoniedu/comexstatr\")"},{"path":"https://leoniedu.github.io/comexstatr/articles/comexstatr.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"comexstatr","text":"Automatic downloading can tricky, due timeout, (lack ) valid security certificates Brazilian government websites, along issues. code uses multi_download function curl library, resumes download fails.","code":"library(comexstatr) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union ##downloading #comexstat_download(years = 2022:2024, types = \"ncm\", ssl_verifypeer=FALSE) try(comexstat_download(years = 2014:2024, types = \"ncm\"                        , ssl_verifypeer=FALSE                        )) #> Error in dplyr::mutate(tibble::tibble(url = c()), path = file.path(comexstatr:::cdircomex,  :  #>   ℹ In argument: `path = file.path(comexstatr:::cdircomex, #>   tolower(basename(url)))`. #> Caused by error in `basename()`: #> ! a character vector argument expected comexstat_ncm_f <- comexstat_ncm()|>filter(year>=2014, year<=2023)"},{"path":"https://leoniedu.github.io/comexstatr/articles/comexstatr.html","id":"main-trade-partners-treating-countries-in-mercosul-and-european-union-as-blocks-","dir":"Articles","previous_headings":"Examples","what":"Main trade partners, treating countries in Mercosul and European Union as blocks.","title":"comexstatr","text":"Using programming language like R makes easy generate statistics reports intended level analysis.","code":"msul <- comexstat(\"pais_bloco\")|>   filter(block_code==111)|>   pull(country_code) #> ℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control. #> Rows: 322 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \";\" #> chr (4): CO_PAIS, NO_BLOCO, NO_BLOCO_ING, NO_BLOCO_ESP #> dbl (1): CO_BLOCO #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. eu <- comexstat(\"pais_bloco\")|>   filter(block_code==22)|>   pull(country_code) #> ℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control. #> Rows: 322 Columns: 5── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \";\" #> chr (4): CO_PAIS, NO_BLOCO, NO_BLOCO_ING, NO_BLOCO_ESP #> dbl (1): CO_BLOCO #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. pb <- comexstat(\"pais\")|>   transmute(country_code,              partner=               case_when(country_code%in%msul ~ \"Mercosul\",                         country_code%in%eu ~ \"European Union\",                         TRUE ~ country_name)               ) #> ℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control. #> Rows: 281 Columns: 6── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \";\" #> chr (6): CO_PAIS, CO_PAIS_ISON3, CO_PAIS_ISOA3, NO_PAIS, NO_PAIS_ING, NO_PAI... #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. cstat_top_0 <- comexstat_ncm_f|>   left_join(pb) |>    #filter(co_ano>=2017)|>   group_by(partner)|>   summarise(fob_usd=sum(fob_usd))|>   ungroup() |>    arrange(desc(fob_usd))|>   collect()|>   slice(1:5)  cstat_top <- comexstat_ncm_f |>   left_join(pb) |>    semi_join(cstat_top_0, by=c(\"partner\"))|>   group_by(year, partner, direction)|>   summarise(fob_usd=sum(fob_usd))|>   collect()  library(ggplot2) ggplot(aes(x=year,             y=fob_usd_bi),         data=cstat_top|>          mutate(fob_usd_bi=fob_usd/1e9)) +   geom_line(aes(color=partner)) +   facet_wrap(~direction) +   labs(color=\"\", x=\"\", y=\"US$ Bi (FOB)\") +   theme_linedraw() + theme(legend.position=\"bottom\")"},{"path":"https://leoniedu.github.io/comexstatr/articles/comexstatr.html","id":"imports-and-exports-by-brazilian-state","dir":"Articles","previous_headings":"Examples","what":"Imports and exports by Brazilian state","title":"comexstatr","text":"access information available via web interface http://comexstat.mdic.gov.br/en/home, ","code":"bystate <- comexstat_ncm_f |>    group_by(state_abb, year, direction)|>   summarise(fob_usd=sum(fob_usd))|>   collect()  topstate <- bystate|>   group_by(state_abb)|>   summarise(fob_usd=sum(fob_usd))|>   arrange(-fob_usd)|>   head(3)   ggplot(aes(x=year, y=fob_usd_bi, color=state_abb),         data=bystate|>         semi_join(topstate, by=\"state_abb\")|>         mutate(fob_usd_bi=fob_usd/1e9)) +   geom_line() +   facet_wrap(~direction) +   labs(color=\"\", x=\"\", y=\"US$ Bi (FOB)\") +   theme_linedraw() + theme(legend.position=\"bottom\")"},{"path":"https://leoniedu.github.io/comexstatr/articles/comexstatr.html","id":"deflate-using-cpi-for-usd-or-ipca-for-brl-experimental","dir":"Articles","previous_headings":"","what":"Deflate using CPI (for USD) or IPCA (for BRL) (Experimental)","title":"comexstatr","text":"","code":"selected_deflated <- comexstat_ncm_f%>%   filter(country_code%in%c(249, 160, 63))%>%   group_by(direction, date, country_code)%>%   comex_sum()|>   comexstat_deflated()%>%   collect()  selected_deflated_r <- selected_deflated%>%   left_join(comexstat(\"pais\"))%>%   group_by(direction, country_name)%>%   arrange(date)%>%   filter(!is.na(fob_usd))%>%   comex_roll(x = c(\"fob_usd_deflated\")) #> ℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control. #> Rows: 281 Columns: 6 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \";\" #> chr (6): CO_PAIS, CO_PAIS_ISON3, CO_PAIS_ISOA3, NO_PAIS, NO_PAIS_ING, NO_PAI... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining with `by = join_by(country_code)` ggplot(aes(x=date, y=fob_usd_deflated_12/1e9, color=country_name),         data=selected_deflated_r)+   facet_wrap(~direction)+   geom_line() +   labs(color=\"\", x=\"\", y=\"US$ Bi (FOB) Deflated by CPI \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\") +   theme_linedraw() + theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\"))  #> Warning: Removed 33 rows containing missing values (`geom_line()`)."},{"path":"https://leoniedu.github.io/comexstatr/articles/comexstatr.html","id":"trade-balance","dir":"Articles","previous_headings":"","what":"Trade balance","title":"comexstatr","text":"","code":"balance_deflated <- comexstat_ncm_f%>%   group_by(direction, date)%>%   comex_sum()%>%   comexstat_deflated()%>%   comex_roll(x = c(\"fob_brl\", \"fob_usd\", \"fob_usd_deflated\", \"fob_brl_deflated\", \"cif_usd_deflated\", \"cif_brl_deflated\"))%>%   collect()  # volume_deflated_r <- balance_deflated%>% #   group_by(date)%>% #   summarise(across(matches(\"^(fob|cif|qt)\"), sum))  ggplot(aes(x=date, y=fob_usd_deflated_12/1e9, color=direction),         data=balance_deflated) +   scale_color_manual(values=c(\"blue\", \"red\")) +   geom_line() +   labs(color=\"\", x=\"\", y=\"US$ Bi (FOB) Deflated by CPI \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\") +   theme_linedraw() +    geom_vline(xintercept=as.Date(\"2023-01-01\"))+   theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\"))  #> Warning: Removed 22 rows containing missing values (`geom_line()`). usdmax <- balance_deflated%>%   group_by(direction)%>%   arrange(desc(fob_usd_deflated/1e9))%>%   slice(1)  ggplot(aes(x=date, y=fob_usd_deflated_12/1e9, color=direction),         data=balance_deflated) +   geom_line(aes(y=fob_usd_12/1e9), linetype=2) +   scale_color_manual(values=c(\"blue\", \"red\")) +   geom_line() +   #geom_line(aes(y=vl_fob_usd_bi), linetype='dashed')+   labs(color=\"\", x=\"\", y=\"USD Bi (FOB) Deflated by CPI \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\", title=\"Deflated by CPI vs Nominal\",        subtitle = glue::glue(\"Max of 12 month exports value occurred on {usdmax%>%filter(direction=='exp')%>%pull(date)},\\n imports on {usdmax%>%filter(direction=='imp')%>%pull(date)}\")) +   theme_linedraw() +    geom_vline(xintercept=as.Date(\"2023-01-01\"))+   theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\"))  #> Warning: Removed 22 rows containing missing values (`geom_line()`). #> Removed 22 rows containing missing values (`geom_line()`). brlmax <- balance_deflated%>%   group_by(direction)%>%   arrange(desc(fob_brl_deflated/1e9))%>%   slice(1)  ggplot(aes(x=date, y=fob_brl_deflated_12/1e9, color=direction),         data=balance_deflated) +   scale_color_manual(values=c(\"blue\", \"red\")) +   geom_line() +   #geom_line(aes(y=vl_fob_usd_bi), linetype='dashed')+   labs(color=\"\", x=\"\", y=\"R$ Bi (FOB) Deflated by IPCA \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\", title=\"Deflated by IPCA\",        subtitle = glue::glue(\"Max of 12 month exports value occurred on {brlmax%>%filter(direction=='exp')%>%pull(date)},\\n imports on {brlmax%>%filter(direction=='imp')%>%pull(date)}\")) +   theme_linedraw() +    geom_vline(xintercept=as.Date(\"2023-01-01\"))+   theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\"))  #> Warning: Removed 22 rows containing missing values (`geom_line()`)."},{"path":"https://leoniedu.github.io/comexstatr/articles/comexstatr.html","id":"last-month","dir":"Articles","previous_headings":"Trade balance","what":"Last month","title":"comexstatr","text":"","code":"ggplot(aes(x=date, y=fob_brl_deflated_12/1e9, color=direction),         data=balance_deflated%>%filter(lubridate::month(date)==lubridate::month(max(balance_deflated$date)))        ) +   scale_color_manual(values=c(\"blue\", \"red\")) +   geom_line() +   geom_line(aes(y=fob_brl_12/1e9), linetype='dashed') +   #geom_point(aes(y=fob_brl_bi), linetype='dashed') +   labs(color=\"\", x=\"\", y=\"R$ Bi (FOB) Deflated by IPCA \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\") +   theme_linedraw() +    geom_vline(xintercept=as.Date(\"2024-01-01\"))+   theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\")) ggplot(aes(x=date, y=balance_usd_deflated_12),         data=          balance_deflated%>%          group_by(date)%>%          arrange(desc(direction))%>%          summarise(balance_usd_deflated_12=fob_usd_deflated_12[2]/1e9-fob_usd_deflated_12[1]/1e9))+   #scale_color_manual(values=c(\"blue\", \"red\")) +   geom_line()  +   labs(color=\"\", x=\"\", y=\"USD$ Bi (FOB) Deflated by CPI \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\") +   theme_linedraw() +    theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\"))  #> Warning: Removed 11 rows containing missing values (`geom_line()`)."},{"path":"https://leoniedu.github.io/comexstatr/articles/comexstatr.html","id":"brl","dir":"Articles","previous_headings":"Trade balance","what":"BRL","title":"comexstatr","text":"","code":"ggplot(aes(x=date, y=balance_brl_deflated_12),         data=          balance_deflated%>%          group_by(date)%>%          arrange(desc(direction))%>%          summarise(balance_brl_deflated_12=fob_brl_deflated_12[2]/1e9-fob_brl_deflated_12[1]/1e9)%>%          na.omit()                    )+   #scale_color_manual(values=c(\"blue\", \"red\")) +   geom_line()  +   labs(color=\"\", x=\"\", y=\"R$ Bi (FOB) Deflated by CPI \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\") +   theme_linedraw() +    theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\"))"},{"path":"https://leoniedu.github.io/comexstatr/articles/comexstatr.html","id":"by-cgce","dir":"Articles","previous_headings":"","what":"By CGCE","title":"comexstatr","text":"","code":"by_cat_0 <- comexstat_ncm() |>    filter(date>=\"2022-01-01\")%>%   filter(## usa          #country_code==249          ## china          #country_code==160          ) |>   left_join(ncms()%>%select(ncm=co_ncm,                              name=no_cgce_n3_ing, code=co_cgce_n3                             #name=no_ncm_ing, code=co_ncm                             ))|>   group_by(name,code, direction, date)|>   comex_sum()|>   comexstat_deflated()%>%   filter(!is.na(fob_brl_deflated))  by_cat_1 <- by_cat_0%>%   group_by(name,code, direction)|>   comex_roll()%>%   ungroup%>%   filter(lubridate::month(date)==lubridate::month(max(date)))%>%   mutate(year=lubridate::year(date))%>%   filter(year>=(max(year)-1))%>%   mutate(year=factor(year,labels = c(\"last\", \"current\")))  by_cat_2 <- by_cat_1%>%   select(name,code, direction, fob_usd_deflated_12, year)%>%   tidyr::pivot_wider(names_from=c(\"year\"), values_from = fob_usd_deflated_12)%>%   mutate(current=tidyr::replace_na(current, 0),          last=tidyr::replace_na(last, 0),     d=current-last, s=last+current, p=current/last)  by_cat <- by_cat_2%>%   group_by(code)%>%   summarise(total=sum(abs(current-last)))%>%   arrange(desc(total))%>%   head(10)%>%   inner_join(by_cat_2)%>%   arrange(total) #> Joining with `by = join_by(code)` ggplot(aes(y=label, x=d/1e9, fill=direction), data=by_cat%>%mutate(label=forcats::fct_inorder(paste0(code, \": \", stringr::str_wrap(name,30))))) + geom_col(position=\"dodge\")+ labs(x=\"\", y=\"\") +   scale_fill_manual(values=c(\"blue\", \"red\")) +   theme_linedraw()"},{"path":"https://leoniedu.github.io/comexstatr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eduardo Leoni. Author, maintainer.","code":""},{"path":"https://leoniedu.github.io/comexstatr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Leoni E (2024). comexstatr: Access brazilian foreign trade data- Comexstat.. https://github.com/leoniedu/comexstatr, https://leoniedu.github.io/comexstatr/.","code":"@Manual{,   title = {comexstatr: Access to brazilian foreign trade data- Comexstat.},   author = {Eduardo Leoni},   year = {2024},   note = {https://github.com/leoniedu/comexstatr, https://leoniedu.github.io/comexstatr/}, }"},{"path":[]},{"path":"https://leoniedu.github.io/comexstatr/reference/comex_roll.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Rolling Sums for Comex Data — comex_roll","title":"Calculate Rolling Sums for Comex Data — comex_roll","text":"function computes rolling sums specified window selected columns Comex (Brazilian trade) dataset.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comex_roll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Rolling Sums for Comex Data — comex_roll","text":"","code":"comex_roll(   data,   x = c(\"qt_stat\", \"kg_net\", \"fob_\", \"freight_\", \"insurance_\", \"cif_\"),   k = 12 )"},{"path":"https://leoniedu.github.io/comexstatr/reference/comex_roll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Rolling Sums for Comex Data — comex_roll","text":"data data frame tibble containing Comex data, date column. x character vector specifying column names calculate rolling sums. Defaults c(\"qt_stat\", \"kg_net\", \"fob_usd\", \"freight_usd\", \"insurance_usd\", \"cif_usd\"). k integer specifying window size (months) rolling sum calculation. Defaults 12.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comex_roll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Rolling Sums for Comex Data — comex_roll","text":"modified version input data, new columns added column x. new column names format \"original_col_name_k\", k window size. new columns contain rolling sums corresponding original columns.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comex_roll.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Rolling Sums for Comex Data — comex_roll","text":"function uses slider package's slide_index_dbl function efficiently calculate rolling sums. particularly useful analyzing trends Comex data time. rolling sum date calculated summing values current date k-1 months prior. fewer k months data available given date, available data used sum.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comex_roll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Rolling Sums for Comex Data — comex_roll","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(lubridate) #> Warning: package ‘lubridate’ was built under R version 4.3.1 #>  #> Attaching package: ‘lubridate’ #> The following objects are masked from ‘package:base’: #>  #>     date, intersect, setdiff, union  # Create sample Comex data set.seed(123)  # For reproducibility comex_data <- tibble(   date = seq(from = ymd(\"2023-01-01\"), to = ymd(\"2023-12-01\"), by = \"month\"),   qt_stat = rpois(12, lambda = 100),   fob_usd = runif(12, min = 500, max = 2000) )  # Calculate 6-month rolling sums for 'qt_stat' and 'fob_usd' rolled_data <- comex_roll(comex_data, x = c(\"qt_stat\", \"fob_usd\"), k = 6)"},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Standardize Comexstat Data — comexstat","title":"Read and Standardize Comexstat Data — comexstat","text":"function reads specified Comexstat (Brazilian trade statistics) dataset local CSV file, cleans column names, applies standardized column renaming.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Standardize Comexstat Data — comexstat","text":"","code":"comexstat(table, dir = cdircomex, extension = \".csv\", ...)"},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Standardize Comexstat Data — comexstat","text":"table character string specifying name Comexstat table read. dir directory containing Comexstat data file (defaults cdircomex). extension file extension Comexstat data file (defaults \".csv\"). ... Additional arguments passed readr::read_csv2, col_types, na, etc.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Standardize Comexstat Data — comexstat","text":"tibble (data frame) containing specified Comexstat data standardized column names.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Standardize Comexstat Data — comexstat","text":"","code":"if (FALSE) { # Read the \"ncm\" table from the default directory ncm_data <- comexstat(\"ncm\")  # Read the \"ncm_cgce\" table from a specific directory (\"my_data\") ncm_cgce_data <- comexstat(\"ncm_cgce\", dir = \"my_data\")  # Read a table with a different extension (e.g., .txt) other_data <- comexstat(\"other_table\", extension = \".txt\")  }"},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_deflated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deflate and Convert Comexstat Data — comexstat_deflated","title":"Deflate and Convert Comexstat Data — comexstat_deflated","text":"function deflates USD-denominated values Comexstat data (trade statistics) using specified deflators (CPI USD, IPCA BRL converting using exchange rate date statistics)","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_deflated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deflate and Convert Comexstat Data — comexstat_deflated","text":"","code":"comexstat_deflated(   data,   basedate = NULL,   deflators = get_deflators(na_omit = TRUE) )"},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_deflated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deflate and Convert Comexstat Data — comexstat_deflated","text":"data data frame tibble containing Comexstat data. basedate optional date object specifying base date deflation. NULL, latest available date deflators data used. deflators data frame containing deflator time series data, including columns cpi (Consumer Price Index), ipca_i (Brazilian IPCA index), date. Defaults get_deflators() function's output missing values removed.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_deflated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deflate and Convert Comexstat Data — comexstat_deflated","text":"modified version input data, following changes: New columns deflated USD values (e.g., fob_usd_deflated, cif_usd_deflated). New columns BRL values based exchange rate USD values (e.g., fob_brl, cif_brl). New columns deflated BRL values using IPCA deflator (e.g., fob_brl_deflated).","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_deflated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deflate and Convert Comexstat Data — comexstat_deflated","text":"function performs following steps: Handles missing values deflators, issuing warning present. Determines base date deflation, either basedate input latest date deflators. Calculates deflation ratios (cpi_r, ipca_r) date relative base date. Joins deflators data input data based date. Deflates USD-denominated columns (fob_usd, cif_usd, etc.) using cpi_r. Converts USD values BRL based exchange rate brlusd column. Deflates BRL values using ipca_r. Arranges resulting data date.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_deflated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deflate and Convert Comexstat Data — comexstat_deflated","text":"","code":"if (FALSE) { # Deflate using default data and latest base date deflated_data <- comexstat_deflated()  # Deflate with a specific base date (e.g., 2023-12-31) deflated_data <- comexstat_deflated(basedate = as.Date(\"2023-12-31\")) }"},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Comexstat Data from MDIC (Brazilian Ministry of Development, Industry, Commerce, and Services) — comexstat_download","title":"Download Comexstat Data from MDIC (Brazilian Ministry of Development, Industry, Commerce, and Services) — comexstat_download","text":"function downloads Comexstat (Brazilian trade statistics) data MDIC website specified years, directions (imports/exports), types (NCM/HS4). can also optionally download manage auxiliary data tables.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Comexstat Data from MDIC (Brazilian Ministry of Development, Industry, Commerce, and Services) — comexstat_download","text":"","code":"comexstat_download(   years = 2024,   directions = c(\"imp\", \"exp\"),   types = c(\"hs4\", \"ncm\"),   download_aux = TRUE,   clean_aux = TRUE,   cache = TRUE,   .progress = TRUE,   n_tries = 30,   check = FALSE,   ... )"},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Comexstat Data from MDIC (Brazilian Ministry of Development, Industry, Commerce, and Services) — comexstat_download","text":"years numeric vector integer specifying years data downloaded. Defaults current year (2024). directions character vector specifying directions trade: \"imp\" (imports) /\"exp\" (exports). Defaults . types character vector specifying types data: \"ncm\" (Nomenclatura Comum Mercosul) /\"hs4\" (Harmonized System 4-digit). Defaults . download_aux logical value indicating whether download auxiliary data tables (e.g., URF, VIA, country codes). Defaults TRUE. clean_aux logical value indicating whether delete existing auxiliary data files downloading new ones. Defaults TRUE. cache logical value indicating whether use cached files exist. Defaults TRUE. .progress logical value indicating whether display progress bar downloads. Defaults TRUE. n_tries maximum number download attempts giving . Defaults 30. check logical value indicating whether perform data validation checks downloading. Defaults FALSE. ... Additional arguments passed curl::multi_download, headers, handle, etc.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Comexstat Data from MDIC (Brazilian Ministry of Development, Industry, Commerce, and Services) — comexstat_download","text":"direct return value. function downloads requested files specified directories.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_download.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download Comexstat Data from MDIC (Brazilian Ministry of Development, Industry, Commerce, and Services) — comexstat_download","text":"function constructs URLs specified Comexstat data files based years, directions, types arguments. creates necessary directories store data. Downloads performed using curl::multi_download, retry logic initial failures. download_aux TRUE, additional auxiliary data tables downloaded well. check TRUE, basic data validation check performed using internal comexstat_check function.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Comexstat Data from MDIC (Brazilian Ministry of Development, Industry, Commerce, and Services) — comexstat_download","text":"","code":"if (FALSE) { # Download all data for 2023 and 2024 comexstat_download(years = 2023:2024)  # Download only import data (NCM) for 2024 comexstat_download(years = 2024, directions = \"imp\", types = \"ncm\") }"},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_hs4.html","id":null,"dir":"Reference","previous_headings":"","what":"Open ComexStat HS4 Trade Dataset — comexstat_hs4","title":"Open ComexStat HS4 Trade Dataset — comexstat_hs4","text":"function opens ComexStat HS4 trade data Arrow Dataset. data assumed located ComexStat data directory downloaded using comexstat_download() function.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_hs4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open ComexStat HS4 Trade Dataset — comexstat_hs4","text":"","code":"comexstat_hs4()"},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_hs4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open ComexStat HS4 Trade Dataset — comexstat_hs4","text":"Arrow Dataset containing combined import export HS4 trade data. dataset following columns: year: Year (integer) month: Month (integer) hs4: 4-digit HS product code (integer) country_code: Country code (integer) state: Brazilian state abbreviation (string) mun_code: Municipality code (integer) kg_net: Net weight kilograms (integer64) fob_usd: FOB value US dollars (integer64) direction: Trade direction, either \"exp\" (export) \"imp\" (import)","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_hs4.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Open ComexStat HS4 Trade Dataset — comexstat_hs4","text":"function assumes HS4 data files named according following pattern: Imports: \"imp_year_mun.csv\" (e.g., \"imp_2023_mun.csv\") Exports: \"exp_year_mun.csv\" (e.g., \"exp_2023_mun.csv\")","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_hs4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open ComexStat HS4 Trade Dataset — comexstat_hs4","text":"","code":"if (FALSE) { # Open the ComexStat HS4 dataset: hs4_dataset <- comexstat_hs4()  # Explore the dataset: print(hs4_dataset) }"},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_ncm.html","id":null,"dir":"Reference","previous_headings":"","what":"Open ComexStat NCM Trade Dataset — comexstat_ncm","title":"Open ComexStat NCM Trade Dataset — comexstat_ncm","text":"function opens ComexStat NCM (8-digit product code) trade data Arrow Dataset. data assumed located  ComexStat data directory downloaded using comexstat_download() function.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_ncm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open ComexStat NCM Trade Dataset — comexstat_ncm","text":"","code":"comexstat_ncm(check = FALSE)"},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_ncm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open ComexStat NCM Trade Dataset — comexstat_ncm","text":"Arrow Dataset containing combined import export NCM trade data, additional direction column indicating \"exp\" (export) \"imp\" (import). dataset following columns: year: Year (integer) month: Month (integer) ncm: 8-digit NCM product code (string) unit_code: Unit measurement code (integer) country_code: Country code (integer) state_abb: Brazilian state abbreviation (string) transp_mode_code: Transportation mode code (integer) urf_code: Customs clearance unit code (integer) qt_stat: Statistical quantity (integer64) kg_net: Net weight kilograms (integer64) fob_usd: FOB value US dollars (integer64) freight_usd: Freight value US dollars (integer64, imports) insurance_usd: Insurance value US dollars (integer64, imports) direction: Trade direction, either \"exp\" (export) \"imp\" (import) (derived)","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_ncm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Open ComexStat NCM Trade Dataset — comexstat_ncm","text":"function assumes NCM data files named according following pattern: Imports: \"imp_year.csv\" (e.g., \"imp_2023.csv\") Exports: \"exp_year.csv\" (e.g., \"exp_2023.csv\") infers trade direction based presence absence freight_usd column (present imports).","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/comexstat_ncm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open ComexStat NCM Trade Dataset — comexstat_ncm","text":"","code":"if (FALSE) { library(dplyr) # Open the ComexStat NCM dataset: ncm_dataset <- comexstat_ncm()  # Explore the dataset: print(ncm_dataset) ncm_dataset|>group_by(year, direction)|>summarise(fob_usd=sum(fob_usd), freight_usd=sum(freight_usd))|>mutate(p=freight_usd/fob_usd)|>collect() comexstat_ncm()|>group_by(country_code)|>summarise(fob_usd=sum(fob_usd, na.rm=TRUE), freight_usd=sum(freight_usd))|>mutate(p=freight_usd/fob_usd)|>arrange(desc(p))|>collect() }"},{"path":"https://leoniedu.github.io/comexstatr/reference/get_deflators.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USD) — get_deflators","title":"Download and processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USD) — get_deflators","text":"Download processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USD) Download processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USE)","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/get_deflators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USD) — get_deflators","text":"","code":"get_deflators(updated = Sys.Date(), na_omit = FALSE)  get_deflators(updated = Sys.Date(), na_omit = FALSE)"},{"path":"https://leoniedu.github.io/comexstatr/reference/get_deflators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USD) — get_deflators","text":"updated","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/get_deflators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USD) — get_deflators","text":"data frame columns co_ano_mes (date), ipca (monthly inflation Brazil), ipca_i (monthly inflation Brazil indexed 1997-01-01 1), cpi index (monthly inflation USA). data frame columns co_ano_mes (date), ipca (monthly inflation Brazil), ipca_i (monthly inflation Brazil indexed 1997-01-01 1), cpi index (monthly inflation USA).","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/ncm.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize and Validate NCM Codes — ncm","title":"Standardize and Validate NCM Codes — ncm","text":"function cleans optionally validates NCM (Nomenclatura Comum Mercosul) codes.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/ncm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize and Validate NCM Codes — ncm","text":"","code":"ncm(x, checkncm = TRUE)"},{"path":"https://leoniedu.github.io/comexstatr/reference/ncm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize and Validate NCM Codes — ncm","text":"x character vector containing NCM codes. checkncm logical flag indicating whether perform NCM validation. Defaults TRUE.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/ncm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize and Validate NCM Codes — ncm","text":"character vector cleaned NCM codes. Non-numeric characters removed. Empty strings converted NA. checkncm TRUE, error raised non-NA values exactly 8 characters.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/ncm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardize and Validate NCM Codes — ncm","text":"NCM codes standardized contain digits (0-9). important consistency data analysis comparison. optional validation step ensures cleaned NCM codes adhere expected format 8 digits.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/ncm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize and Validate NCM Codes — ncm","text":"","code":"# Clean and validate valid NCM codes ncm(c(\"01012100\", \"02011000\", \"invalid code\"))  # Raises an error due to \"invalid code\" #> [1] \"01012100\" \"02011000\" NA          # Clean without validation ncm(c(\"01012100\", \"02011000\", \"invalid code\"), checkncm = FALSE) #> [1] \"01012100\" \"02011000\" NA         # Returns: c(\"01012100\", \"02011000\", NA)"},{"path":"https://leoniedu.github.io/comexstatr/reference/ncms.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge and Format NCM Datasets from Comexstat — ncms","title":"Merge and Format NCM Datasets from Comexstat — ncms","text":"function retrieves multiple NCM (Nomenclatura Comum Mercosul) datasets comexstat package, merges single data frame, converts columns character format.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/ncms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge and Format NCM Datasets from Comexstat — ncms","text":"","code":"ncms(files = c(\"ncm\", \"ncm_cgce\", \"ncm_cuci\", \"ncm_isic\", \"ncm_unidade\"))"},{"path":"https://leoniedu.github.io/comexstatr/reference/ncms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge and Format NCM Datasets from Comexstat — ncms","text":"files character vector specifying names NCM datasets retrieve comexstat. Defaults c(\"ncm\", \"ncm_cgce\", \"ncm_cuci\", \"ncm_isic\", \"ncm_unidade\").","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/ncms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge and Format NCM Datasets from Comexstat — ncms","text":"merged data frame containing specified NCM datasets, columns converted character format.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/ncms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge and Format NCM Datasets from Comexstat — ncms","text":"function streamlines process working multiple NCM datasets comexstat package. performs following steps: Retrieval: Retrieves specified NCM datasets using comexstat function. Merging: Combines retrieved datasets single data frame using left joins. Format Conversion: Converts columns merged data frame character format consistent data manipulation. function suppresses messages warnings retrieval merging steps provide cleaner output.","code":""},{"path":"https://leoniedu.github.io/comexstatr/reference/ncms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge and Format NCM Datasets from Comexstat — ncms","text":"","code":"if (FALSE) { # Merge and format default NCM datasets merged_ncms <- ncms()  # Merge specific NCM datasets (e.g., only \"ncm\" and \"ncm_cuci\") merged_ncms <- ncms(files = c(\"ncm\", \"ncm_cuci\")) }"},{"path":"https://leoniedu.github.io/comexstatr/news/index.html","id":"version-01","dir":"Changelog","previous_headings":"","what":"Version 0.1","title":"Version 0.1","text":"First release","code":""}]
