[{"path":[]},{"path":"https://leoniedu.github.io/comexr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"https://leoniedu.github.io/comexr/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"https://leoniedu.github.io/comexr/articles/arrecadacao_ii_ipi_vinculado_e_comex.html","id":"preparação-dos-dados","dir":"Articles","previous_headings":"","what":"Preparação dos Dados","title":"Análise da Arrecadação de Imposto de Importação (II) e IPI Vinculado sobre as Importações Brasileiras","text":"Primeiramente, carregamos bibliotecas necessárias para análise e visualização dos dados. Em seguida, baixamos os dados Comex de 2019 2024, filtrando apenas importações (direction = “imp”) e utilizando o tipo de classificação NCM (types = “ncm”): Após o download, lemos e limpamos os dados da Receita Federal, selecionando planilha “Tabela III” e pulando primeiras 6 linhas. Em seguida, ajustamos os dados, criamos uma coluna de data e transformamos os dados para o formato longo, separando categorias de arrecadação: Agora, vamos preparar os dados Comex. Filtramos para o período de 2019 2024, agrupamos por data, e somamos os valores relevantes: Finalmente, combinamos os dados da Receita Federal (arrecadação de II e IPI vinculado) com os dados Comex. Em seguida, deflacionamos os valores, calculamos médias móveis de 12 meses e proporção imposto em relação ao valor CIF das importações:","code":"if (params$download) {   comex_download(2019:2024, directions = \"imp\", types=\"ncm\") } arrecadacao_link <- \"https://www.gov.br/receitafederal/pt-br/centrais-de-conteudo/publicacoes/relatorios/arrecadacao-federal/2024-/analise-mensal-mai-2024-anexo.xlsx/@@download/file\" arrecadacao_file <- here::here(file.path(\"data-raw/\", gsub(\".*(analise.*.xlsx).*\", \"\\\\1\", arrecadacao_link))) if (!file.exists(arrecadacao_file)) download.file(arrecadacao_link, arrecadacao_file) ##obs: unidade: R$ milhões a valores correntes  drfb_0 <- readxl::read_excel(arrecadacao_file, sheet = \"Tabela III\", skip=6)%>%   janitor::clean_names()  meses <- tibble(mes_abrev=c(\"JAN\", \"FEV\", \"MAR\", \"ABR\", \"MAIO\", \"JUN\", \"JUL\", \"AGO\", \"SET\",            \"OUT\", \"NOV\", \"DEZ\"), mes_codigo=1:12)  drfb <- drfb_0%>%   mutate(ano=c(rep(2019:2023, each=13), rep(2024, 7)))%>%   inner_join(meses, by=c(\"mes\"=\"mes_abrev\"))%>%   mutate(date=lubridate::make_date(ano, mes_codigo))%>%   tidyr::pivot_longer(values_to = \"imposto_brl_milhoes\", cols = i_renda:total_geral, names_to = \"arrecadacao_categoria\")%>%   mutate(imposto_brl=imposto_brl_milhoes*1e6, imposto_brl_milhoes=NULL          ) comex <- comexr::comex_ncm()%>%   filter(direction==\"imp\", date<=\"2024-05-01\", date>=\"2019-01-01\")%>%   group_by(date)%>%   comexr::comex_sum()%>%   collect()%>%   ungroup ii_ipi_comex <- drfb%>%   filter(arrecadacao_categoria==\"i_importacao_e_ipi_vinculado\")%>%   left_join(comex, by=c(\"date\"))%>%   comex_deflate()%>%   ungroup%>%   comex_roll(x = c(\"qt_stat\", \"kg_net\", \"fob_\", \"freight_\",                    \"insurance_\", \"cif_\", \"imposto_\"))%>%   mutate(ii_prop=imposto_brl/(cif_brl),          ii_prop_12=imposto_brl_deflated_12/(cif_brl_deflated_12))"},{"path":"https://leoniedu.github.io/comexr/articles/arrecadacao_ii_ipi_vinculado_e_comex.html","id":"visualização-da-proporção-do-imposto","dir":"Articles","previous_headings":"","what":"Visualização da Proporção do Imposto","title":"Análise da Arrecadação de Imposto de Importação (II) e IPI Vinculado sobre as Importações Brasileiras","text":"O gráfico acima mostra evolução da proporção Imposto de Importação (II) e IPI vinculado em relação ao valor CIF das importações ao longo tempo. linha vermelha sólida representa proporção mensal, enquanto linha tracejada vermelha representa média móvel de 12 meses. linha vertical indica o início Governo Lula 3, em 2023.","code":"ggplot(data=ii_ipi_comex, aes(x=date, y=ii_prop)) +   geom_line(color=\"red\") +   geom_line(aes(y=ii_prop_12), linetype=2, color=\"red\") +   geom_vline(xintercept=as.Date(\"2023-01-01\"), color=\"orange\") +   hrbrthemes::theme_ft_rc() +   scale_y_continuous(\"Imposto de Importação (II) + IPI vinculado* (%)\", limits=c(0,NA), expand=c(0,0), labels = scales::percent) +   labs(x=\"\", caption = \"* (Arrecadação com II + IPI vinculado em Reais) / Valor Importado CIF em Reais.\\nLinha tracejada utiliza valores acumulados em 12 meses, deflacionados pelo IPCA \") #> Warning: Removed 11 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://leoniedu.github.io/comexr/articles/comexr.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"comexr","text":"problems installing arrow, see: https://arrow.apache.org/docs/r/articles/install.html","code":"##devtools::install_github(\"leoniedu/comexr\")"},{"path":"https://leoniedu.github.io/comexr/articles/comexr.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"comexr","text":"Automatic downloading can tricky, due timeout, (lack ) valid security certificates Brazilian government websites, along issues. code uses multi_download function curl library, resumes download fails.","code":"library(comexr) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  ##downloading #comex_download(years = 2022:2024, types = \"ncm\", ssl_verifypeer=FALSE) if (params$download) {   try(comex_download(years = 2014:2024, types = \"ncm\"                      , ssl_verifypeer=FALSE   )) }  comex_ncm_f <- comex_ncm()|>filter(year>=2014, year<=2023)"},{"path":"https://leoniedu.github.io/comexr/articles/comexr.html","id":"main-trade-partners-treating-countries-in-mercosul-and-european-union-as-blocks-","dir":"Articles","previous_headings":"Examples","what":"Main trade partners, treating countries in Mercosul and European Union as blocks.","title":"comexr","text":"Using programming language like R makes easy generate statistics reports intended level analysis.","code":"msul <- comex(\"pais_bloco\")|>   filter(block_code==111)|>   pull(country_code) #> Rows: 322 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \";\" #> chr (4): CO_PAIS, NO_BLOCO, NO_BLOCO_ING, NO_BLOCO_ESP #> dbl (1): CO_BLOCO #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. eu <- comex(\"pais_bloco\")|>   filter(block_code==22)|>   pull(country_code) #> Rows: 322 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \";\" #> chr (4): CO_PAIS, NO_BLOCO, NO_BLOCO_ING, NO_BLOCO_ESP #> dbl (1): CO_BLOCO #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  pb <- comex(\"pais\")|>   transmute(country_code,              partner=               case_when(country_code%in%msul ~ \"Mercosul\",                         country_code%in%eu ~ \"European Union\",                         TRUE ~ country_name)               ) #> Rows: 281 Columns: 6 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \";\" #> chr (6): CO_PAIS, CO_PAIS_ISON3, CO_PAIS_ISOA3, NO_PAIS, NO_PAIS_ING, NO_PAI... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  cstat_top_0 <- comex_ncm_f|>   left_join(pb) |>    group_by(partner)|>   summarise(fob_usd=sum(fob_usd))|>   ungroup() |>    arrange(desc(fob_usd))|>   collect()|>   slice(1:5)  cstat_top <- comex_ncm_f |>   left_join(pb) |>    semi_join(cstat_top_0, by=c(\"partner\"))|>   group_by(year, partner, direction)|>   summarise(fob_usd=sum(fob_usd))|>   collect()  library(ggplot2) ggplot(aes(x=year,             y=fob_usd_bi),         data=cstat_top|>          mutate(fob_usd_bi=fob_usd/1e9)) +   geom_line(aes(color=partner)) +   facet_wrap(~direction) +   labs(color=\"\", x=\"\", y=\"US$ Bi (FOB)\") +   theme_linedraw() + theme(legend.position=\"bottom\")"},{"path":"https://leoniedu.github.io/comexr/articles/comexr.html","id":"imports-and-exports-by-brazilian-state","dir":"Articles","previous_headings":"Examples","what":"Imports and exports by Brazilian state","title":"comexr","text":"access information available via web interface http://comexstat.mdic.gov.br/en/home, ","code":"bystate <- comex_ncm_f |>    group_by(state_abb, year, direction)|>   summarise(fob_usd=sum(fob_usd))|>   collect()  topstate <- bystate|>   group_by(state_abb)|>   summarise(fob_usd=sum(fob_usd))|>   arrange(-fob_usd)|>   head(3)   ggplot(aes(x=year, y=fob_usd_bi, color=state_abb),         data=bystate|>         semi_join(topstate, by=\"state_abb\")|>         mutate(fob_usd_bi=fob_usd/1e9)) +   geom_line() +   facet_wrap(~direction) +   labs(color=\"\", x=\"\", y=\"US$ Bi (FOB)\") +   theme_linedraw() + theme(legend.position=\"bottom\")"},{"path":"https://leoniedu.github.io/comexr/articles/comexr.html","id":"deflate-using-cpi-for-usd-or-ipca-for-brl-experimental","dir":"Articles","previous_headings":"","what":"Deflate using CPI (for USD) or IPCA (for BRL) (Experimental)","title":"comexr","text":"","code":"selected_deflated <- comex_ncm_f%>%   filter(country_code%in%c(249, 160, 63))%>%   group_by(direction, date, country_code)%>%   comex_sum()|>   comex_deflate()%>%   collect()  selected_deflated_r <- selected_deflated%>%   left_join(comex(\"pais\"))%>%   group_by(direction, country_name)%>%   arrange(date)%>%   filter(!is.na(fob_usd))%>%   comex_roll(x = c(\"fob_usd_deflated\")) #> Rows: 281 Columns: 6 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \";\" #> chr (6): CO_PAIS, CO_PAIS_ISON3, CO_PAIS_ISOA3, NO_PAIS, NO_PAIS_ING, NO_PAI... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining with `by = join_by(country_code)`    ggplot(aes(x=date, y=fob_usd_deflated_12/1e9, color=country_name),         data=selected_deflated_r)+   facet_wrap(~direction)+   geom_line() +   labs(color=\"\", x=\"\", y=\"US$ Bi (FOB) Deflated by CPI \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\") +   theme_linedraw() + theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\"))  #> Warning: Removed 33 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://leoniedu.github.io/comexr/articles/comexr.html","id":"trade-balance","dir":"Articles","previous_headings":"","what":"Trade balance","title":"comexr","text":"","code":"balance_deflated <- comex_ncm_f%>%   group_by(direction, date)%>%   comex_sum()%>%   comex_deflate()%>%   comex_roll(x = c(\"fob_brl\", \"fob_usd\", \"fob_usd_deflated\", \"fob_brl_deflated\", \"cif_usd_deflated\", \"cif_brl_deflated\"))%>%   collect()  # volume_deflated_r <- balance_deflated%>% #   group_by(date)%>% #   summarise(across(matches(\"^(fob|cif|qt)\"), sum))  ggplot(aes(x=date, y=fob_usd_deflated_12/1e9, color=direction),         data=balance_deflated) +   scale_color_manual(values=c(\"blue\", \"red\")) +   geom_line() +   labs(color=\"\", x=\"\", y=\"US$ Bi (FOB) Deflated by CPI \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\") +   theme_linedraw() +    geom_vline(xintercept=as.Date(\"2023-01-01\"))+   theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\"))  #> Warning: Removed 22 rows containing missing values or values outside the scale range #> (`geom_line()`). usdmax <- balance_deflated%>%   group_by(direction)%>%   arrange(desc(fob_usd_deflated/1e9))%>%   slice(1)  ggplot(aes(x=date, y=fob_usd_deflated_12/1e9, color=direction),         data=balance_deflated) +   geom_line(aes(y=fob_usd_12/1e9), linetype=2) +   scale_color_manual(values=c(\"blue\", \"red\")) +   geom_line() +   #geom_line(aes(y=vl_fob_usd_bi), linetype='dashed')+   labs(color=\"\", x=\"\", y=\"USD Bi (FOB) Deflated by CPI \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\", title=\"Deflated by CPI vs Nominal\",        subtitle = glue::glue(\"Max of 12 month exports value occurred on {usdmax%>%filter(direction=='exp')%>%pull(date)},\\n imports on {usdmax%>%filter(direction=='imp')%>%pull(date)}\")) +   theme_linedraw() +    geom_vline(xintercept=as.Date(\"2023-01-01\"))+   theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\"))  #> Warning: Removed 22 rows containing missing values or values outside the scale range #> (`geom_line()`). #> Removed 22 rows containing missing values or values outside the scale range #> (`geom_line()`). brlmax <- balance_deflated%>%   group_by(direction)%>%   arrange(desc(fob_brl_deflated/1e9))%>%   slice(1)  ggplot(aes(x=date, y=fob_brl_deflated_12/1e9, color=direction),         data=balance_deflated) +   scale_color_manual(values=c(\"blue\", \"red\")) +   geom_line() +   #geom_line(aes(y=vl_fob_usd_bi), linetype='dashed')+   labs(color=\"\", x=\"\", y=\"R$ Bi (FOB) Deflated by IPCA \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\", title=\"Deflated by IPCA\",        subtitle = glue::glue(\"Max of 12 month exports value occurred on {brlmax%>%filter(direction=='exp')%>%pull(date)},\\n imports on {brlmax%>%filter(direction=='imp')%>%pull(date)}\")) +   theme_linedraw() +    geom_vline(xintercept=as.Date(\"2023-01-01\"))+   theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\"))  #> Warning: Removed 22 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://leoniedu.github.io/comexr/articles/comexr.html","id":"last-month","dir":"Articles","previous_headings":"Trade balance","what":"Last month","title":"comexr","text":"","code":"ggplot(aes(x=date, y=fob_brl_deflated_12/1e9, color=direction),         data=balance_deflated%>%filter(lubridate::month(date)==lubridate::month(max(balance_deflated$date)))        ) +   scale_color_manual(values=c(\"blue\", \"red\")) +   geom_line() +   geom_line(aes(y=fob_brl_12/1e9), linetype='dashed') +   #geom_point(aes(y=fob_brl_bi), linetype='dashed') +   labs(color=\"\", x=\"\", y=\"R$ Bi (FOB) Deflated by IPCA \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\") +   theme_linedraw() +    geom_vline(xintercept=as.Date(\"2024-01-01\"))+   theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\")) ggplot(aes(x=date, y=balance_usd_deflated_12),         data=          balance_deflated%>%          group_by(date)%>%          arrange(desc(direction))%>%          summarise(balance_usd_deflated_12=fob_usd_deflated_12[2]/1e9-fob_usd_deflated_12[1]/1e9))+   #scale_color_manual(values=c(\"blue\", \"red\")) +   geom_line()  +   labs(color=\"\", x=\"\", y=\"USD$ Bi (FOB) Deflated by CPI \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\") +   theme_linedraw() +    theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\"))  #> Warning: Removed 11 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://leoniedu.github.io/comexr/articles/comexr.html","id":"brl","dir":"Articles","previous_headings":"Trade balance","what":"BRL","title":"comexr","text":"","code":"ggplot(aes(x=date, y=balance_brl_deflated_12),         data=          balance_deflated%>%          group_by(date)%>%          arrange(desc(direction))%>%          summarise(balance_brl_deflated_12=fob_brl_deflated_12[2]/1e9-fob_brl_deflated_12[1]/1e9)%>%          na.omit()                    )+   #scale_color_manual(values=c(\"blue\", \"red\")) +   geom_line()  +   labs(color=\"\", x=\"\", y=\"R$ Bi (FOB) Deflated by CPI \"%>%paste0(format(max(selected_deflated_r$date), \"%m/%Y\")), caption = \"* 12 month rolling sums\") +   theme_linedraw() +    theme(legend.position=\"bottom\") #+ scale_color_manual(values=c(\"red\",  \"blue\"))"},{"path":"https://leoniedu.github.io/comexr/articles/comexr.html","id":"by-cgce","dir":"Articles","previous_headings":"","what":"By CGCE","title":"comexr","text":"","code":"by_cat_0 <- comex_ncm() |>    filter(date>=\"2022-01-01\")%>%   filter(## usa          #country_code==249          ## china          #country_code==160          ) |>   left_join(ncms()%>%select(ncm=co_ncm,                              name=no_cgce_n3_ing, code=co_cgce_n3                             #name=no_ncm_ing, code=co_ncm                             ))|>   group_by(name,code, direction, date)|>   comex_sum()|>   comex_deflate()%>%   filter(!is.na(fob_brl_deflated))  by_cat_1 <- by_cat_0%>%   filter(direction==\"imp\")%>%   group_by(name,code, direction)|>   comex_roll(k=1)%>%   rename_with(function(x) gsub(\"_1$\", \"_k\", x))%>%   ungroup%>%   filter(lubridate::month(date)==lubridate::month(max(date)))%>%   mutate(year=lubridate::year(date))%>%   filter(year>=(max(year)-1))%>%   mutate(year=factor(year,labels = c(\"last\", \"current\")))  by_cat_2 <- by_cat_1%>%   select(name,code, direction, fob_usd_deflated_k, year)%>%   tidyr::pivot_wider(names_from=c(\"year\"), values_from = fob_usd_deflated_k)%>%   mutate(current=tidyr::replace_na(current, 0),          last=tidyr::replace_na(last, 0),     d=current-last, s=last+current, p=current/last)  by_cat <- by_cat_2%>%   group_by(code)%>%   summarise(total=sum(abs(current-last)))%>%   arrange(desc(total))%>%   head(10)%>%   inner_join(by_cat_2)%>%   arrange(total) #> Joining with `by = join_by(code)` ggplot(aes(y=label, x=d/1e9, fill=direction), data=by_cat%>%mutate(label=forcats::fct_inorder(paste0(code, \": \", stringr::str_wrap(name,30))))) + geom_col(position=\"dodge\")+ labs(x=\"\", y=\"\") +   scale_fill_manual(values=c(\"blue\", \"red\")) +   theme_linedraw()"},{"path":"https://leoniedu.github.io/comexr/articles/deflacionando_o_comex.html","id":"introdução","dir":"Articles","previous_headings":"","what":"Introdução","title":"Deflacionando o Comex","text":"Esta análise utiliza o pacote comexr R para baixar, limpar e analisar dados de comércio exterior brasileiro, com foco na importância da desinflação. inflação distorce o valor real comércio ao longo tempo, e desinflação é o processo de ajustar esses valores um ano base comum para remover essa distorção. Examinaremos diferença entre os valores comerciais nominais e deflacionados, tanto mensalmente quanto anualmente. Além disso, visualizaremos mudanças anuais nesses valores e exploraremos somas móveis para entender tendências em um período mais longo.","code":"library(comexr)      # Pacote principal para análise de dados da Comex library(ggplot2)         # Para visualização de dados library(dplyr)           # Para manipulação de dados library(lubridate)       # Para trabalhar com datas"},{"path":"https://leoniedu.github.io/comexr/articles/deflacionando_o_comex.html","id":"preparação-dos-dados","dir":"Articles","previous_headings":"","what":"Preparação dos Dados","title":"Deflacionando o Comex","text":"","code":"# Download if (params$download) {   comex_download(year=2010:lubridate::year(Sys.Date()), types = \"ncm\") }  ## limpeza e renomeação, e agregação de dados monthly_summary <- comex_ncm() %>%  filter(year >= 2010) %>%  # Filtrar dados a partir de 2010  # Agrega valores comerciais por mês  group_by(year, date) %>%    comex_sum() %>%         # Soma as colunas relevantes  # Deflaciona os valores usando o IPCA  comex_deflate()"},{"path":"https://leoniedu.github.io/comexr/articles/deflacionando_o_comex.html","id":"agrega-por-ano-mantendo-apenas-anos-completos","dir":"Articles","previous_headings":"Preparação dos Dados","what":"Agrega por ano, mantendo apenas anos completos","title":"Deflacionando o Comex","text":"","code":"yearly_summary <- monthly_summary %>%  group_by(year) %>%  filter(max(month(date)) == 12L) %>% # Apenas anos completos  comex_sum()  # Soma as colunas relevantes para totais anuais"},{"path":[]},{"path":"https://leoniedu.github.io/comexr/articles/deflacionando_o_comex.html","id":"valores-nominais-vs--deflacionados-mensais","dir":"Articles","previous_headings":"Visualização e Análise","what":"Valores Nominais vs. Deflacionados (Mensais)","title":"Deflacionando o Comex","text":"Este gráfico contrasta os valores FOB (Free Board) nominais (não ajustados pela inflação) e deflacionados em bilhões de dólares americanos ao longo tempo. diferença entre linhas ilustra como inflação afeta os valores comerciais percebidos.","code":"ggplot(aes(x = date), data=monthly_summary) +  geom_line(aes(y = fob_usd / 1e9, color = \"Nominal USD\")) +  geom_line(aes(y = fob_usd_deflated / 1e9, color = \"Deflacionado USD\")) +  labs(title = \"Valores FOB Nominais vs. Deflacionados Mensais\", x = \"Data\", y = \"USD (Bilhões)\") +  scale_color_manual(values = c(\"Nominal USD\" = \"blue\", \"Deflacionado USD\" = \"red\")) +   theme_linedraw() +   labs(color=\"\")"},{"path":"https://leoniedu.github.io/comexr/articles/deflacionando_o_comex.html","id":"valores-nominais-vs--deflacionados-anuais","dir":"Articles","previous_headings":"Visualização e Análise","what":"Valores Nominais vs. Deflacionados (Anuais)","title":"Deflacionando o Comex","text":"Semelhante ao gráfico mensal, este mostra comparação entre os valores FOB nominais e deflacionados, mas agregados em base anual. Ele fornece uma visão de longo prazo mais clara impacto da inflação.","code":"ggplot(aes(x = year), data=yearly_summary) +  geom_line(aes(y = fob_usd / 1e9, color = \"Nominal USD\")) +  geom_line(aes(y = fob_usd_deflated / 1e9, color = \"Deflacionado USD\")) +  labs(title = \"Valores FOB Nominais vs. Deflacionados Anuais\", x = \"\", y = \"USD (Bilhões)\", color=\"\") +   theme_linedraw()"},{"path":"https://leoniedu.github.io/comexr/articles/deflacionando_o_comex.html","id":"valores-nominais-vs--deflacionados-somas-móveis-de-12-meses","dir":"Articles","previous_headings":"Visualização e Análise","what":"Valores Nominais vs. Deflacionados (Somas Móveis de 12 Meses)","title":"Deflacionando o Comex","text":"Este gráfico utiliza soma móvel de 12 meses para suavizar flutuações de curto prazo nos dados e mostrar tendência de longo prazo. linha vertical marca data com o valor máximo deflacionado (em USD utilizando CPI), 03/2012.","code":"monthly_summary |>  ungroup() |>  # somas móveis de 12 meses  comex_roll() -> m12_summary  dmax <- m12_summary%>%ungroup%>%arrange(desc(fob_usd_deflated_12))%>%head(1)%>%pull(date)  ggplot(m12_summary, aes(x = date)) +  geom_line(aes(y = fob_usd_12 / 1e9, color = \"Nominal USD\")) +  geom_line(aes(y = fob_usd_deflated_12 / 1e9, color = \"Deflacionado USD\")) +  labs(title = \"Valores FOB Nominais vs. Deflacionados (Soma Móvel de 12 Meses)\",        x = \"\", y = \"USD (Bilhões)\", color= \"\") +   theme_linedraw() +  geom_vline(xintercept = dmax, linetype = \"dashed\", color = \"gray\")"},{"path":"https://leoniedu.github.io/comexr/articles/deflacionando_o_comex.html","id":"variação-anual-nos-valores-fob-deflacionados-usd-e-brl","dir":"Articles","previous_headings":"Visualização e Análise","what":"Variação Anual nos Valores FOB Deflacionados (USD e BRL)","title":"Deflacionando o Comex","text":"Este gráfico de barras ilustra variações percentuais anuais nos valores FOB deflacionados, tanto em USD quanto em BRL. Ajuda identificar períodos de crescimento ou declínio comércio, ajustados pela inflação.","code":"yearly_summary |>   mutate(     fob_usd_deflated_growth = (fob_usd_deflated / lag(fob_usd_deflated) - 1) * 100,     fob_brl_deflated_growth = (fob_brl_deflated / lag(fob_brl_deflated) - 1) * 100   ) |>   select(year, fob_brl_deflated_growth, fob_usd_deflated_growth) |>   tidyr::pivot_longer(cols = c(fob_brl_deflated_growth, fob_usd_deflated_growth)) |>   mutate(name=gsub(\"fob_(.*)_deflated_growth\", \"\\\\1\", name)|>toupper())|>  ggplot(aes(x = year, y = value, fill = name)) +  geom_col(position = \"dodge\") +   theme_linedraw() +  labs(title = \"Variação Anual nos Valores FOB Deflacionados\", x = \"Ano\", y = \"% de Crescimento\", fill=\"\")"},{"path":"https://leoniedu.github.io/comexr/articles/deflacionando_o_comex.html","id":"conclusão","dir":"Articles","previous_headings":"","what":"Conclusão","title":"Deflacionando o Comex","text":"Ao incorporar desinflação em nossa análise dos dados de comércio brasileiro, obtemos uma compreensão mais precisa das tendências econômicas subjacentes. O pacote comexr simplifica esse processo, permitindo que nos concentremos em gerar insights em vez de lidar com complexidades da manipulação de dados.","code":""},{"path":"https://leoniedu.github.io/comexr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eduardo Leoni. Author, maintainer.","code":""},{"path":"https://leoniedu.github.io/comexr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Leoni E (2024). comexr: Access brazilian foreign trade data- Comexstat.. R package version 0.0.2.9000, https://leoniedu.github.io/comexr/, https://github.com/leoniedu/comexr.","code":"@Manual{,   title = {comexr: Access to brazilian foreign trade data- Comexstat.},   author = {Eduardo Leoni},   year = {2024},   note = {R package version 0.0.2.9000, https://leoniedu.github.io/comexr/},   url = {https://github.com/leoniedu/comexr}, }"},{"path":[]},{"path":"https://leoniedu.github.io/comexr/reference/comex.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Standardize Comexstat Data — comex","title":"Read and Standardize Comexstat Data — comex","text":"function reads specified Comexstat (Brazilian trade statistics) dataset local CSV file, cleans column names, applies standardized column renaming.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Standardize Comexstat Data — comex","text":"","code":"comex(table, dir = comexr:::cdircomex, extension = \".csv\", ...)"},{"path":"https://leoniedu.github.io/comexr/reference/comex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Standardize Comexstat Data — comex","text":"table character string specifying name Comexstat table read. dir directory containing Comexstat data file (defaults comexr:::cdircomex). extension file extension Comexstat data file (defaults '.csv'). ... Additional arguments passed readr::read_csv2, col_types, na, etc.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Standardize Comexstat Data — comex","text":"tibble (data frame) containing specified Comexstat data standardized column names.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Standardize Comexstat Data — comex","text":"","code":"if (FALSE) { # \\dontrun{ # Read the 'ncm' table from the default directory ncm_data <- comex('ncm')  # Read the 'ncm_cgce' table from a specific directory ('my_data') ncm_cgce_data <- comex('ncm_cgce', dir = 'my_data')  # Read a table with a different extension (e.g., .txt) other_data <- comex('other_table', extension = '.txt')  } # }"},{"path":"https://leoniedu.github.io/comexr/reference/comex_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Consistency Between Comex Data and Conference Files — comex_check","title":"Check Consistency Between Comex Data and Conference Files — comex_check","text":"function verifies consistency downloaded Comex data corresponding conference files provided official source (MDIC). checks aggregated totals specific columns match two sources.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Consistency Between Comex Data and Conference Files — comex_check","text":"","code":"comex_check(years = NULL, directions = NULL, type = \"ncm\")"},{"path":"https://leoniedu.github.io/comexr/reference/comex_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Consistency Between Comex Data and Conference Files — comex_check","text":"years numeric vector specifying years check. NULL (default), available years checked. directions character vector specifying directions trade check: 'imp' (imports) /'exp' (exports). NULL (default), directions checked. type character string indicating type Comex data: 'ncm' (Nomenclatura Comum Mercosul) 'hs4' (Harmonized System 4-digit). Defaults 'ncm'.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Consistency Between Comex Data and Conference Files — comex_check","text":"direct return value. function prints message indicating whether check passed ('clear!') mismatches data conference files. mismatches found, table displaying discrepancies printed error raised.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Consistency Between Comex Data and Conference Files — comex_check","text":"function performs following checks: Input Validation: Ensures type argument valid ('ncm' 'hs4') length 1. Data Retrieval: Reads relevant Comex data (based type) corresponding conference files. Filtering: Filters data conference files based specified years directions provided. Aggregation: Aggregates Comex data year direction calculates sums relevant columns. Comparison: Compares aggregated sums Comex data totals conference files. Mismatch Reporting: mismatches found, table highlighting differences printed console. Error Handling: mismatches exist, function raises error stop analysis.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Consistency Between Comex Data and Conference Files — comex_check","text":"","code":"if (FALSE) { # \\dontrun{ # Check consistency for all NCM data from 2020 onwards comex_check(years = 2020:2023)  # Check consistency for only import data (NCM) comex_check(directions = 'imp')  # Check consistency for HS4 data in 2022 comex_check(years = 2022, type = 'hs4') } # }"},{"path":"https://leoniedu.github.io/comexr/reference/comex_deflate.html","id":null,"dir":"Reference","previous_headings":"","what":"Deflate and Convert Comexstat Data — comex_deflate","title":"Deflate and Convert Comexstat Data — comex_deflate","text":"function deflates USD-denominated values using specified deflators (CPI USD, IPCA BRL converting using exchange rate date statistics)","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_deflate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deflate and Convert Comexstat Data — comex_deflate","text":"","code":"comex_deflate(data, basedate = NULL, deflators = get_deflators(na_omit = TRUE))"},{"path":"https://leoniedu.github.io/comexr/reference/comex_deflate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deflate and Convert Comexstat Data — comex_deflate","text":"data data frame tibble containing data deflated. basedate optional date object specifying base date deflation. NULL, latest available date deflators data used. deflators data frame containing deflator time series data, including columns cpi (Consumer Price Index), ipca_i (Brazilian IPCA index), date. Defaults get_deflators() function's output missing values removed.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_deflate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deflate and Convert Comexstat Data — comex_deflate","text":"modified version input data, following changes: New columns deflated USD values (e.g., fob_usd_deflated, cif_usd_deflated). New columns BRL values based exchange rate USD values (e.g., fob_brl, cif_brl). New columns deflated BRL values using IPCA deflator (e.g., fob_brl_deflated).","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_deflate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deflate and Convert Comexstat Data — comex_deflate","text":"function performs following steps: Handles missing values deflators, issuing warning present. Determines base date deflation, either basedate input latest date deflators. Calculates deflation ratios (cpi_r, ipca_r) date relative base date. Joins deflators data input data based date. Deflates USD-denominated columns (ending _usd, fob_usd, cif_usd, etc.) using cpi_r. Converts USD values BRL based exchange rate brlusd column. Deflates columns BRL values (ending _brl)  using ipca_r. Arranges resulting data date.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_deflate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deflate and Convert Comexstat Data — comex_deflate","text":"","code":"if (FALSE) { # \\dontrun{ } # }"},{"path":"https://leoniedu.github.io/comexr/reference/comex_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Comexstat Data from MDIC (Brazilian Ministry of Development, Industry, Commerce, and Services) — comex_download","title":"Download Comexstat Data from MDIC (Brazilian Ministry of Development, Industry, Commerce, and Services) — comex_download","text":"function downloads Comexstat (Brazilian trade statistics) data MDIC website specified years, directions (imports/exports), types (NCM/HS4). can also optionally download manage auxiliary data tables. download checking csv files, data stores parquet files data directory, order increase speed.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Comexstat Data from MDIC (Brazilian Ministry of Development, Industry, Commerce, and Services) — comex_download","text":"","code":"comex_download(   years = 2024,   directions = c(\"imp\", \"exp\"),   types = c(\"hs4\", \"ncm\"),   cache = TRUE,   .progress = TRUE,   n_tries = 30,   force_download_aux = FALSE,   timeout = 600,   ... )"},{"path":"https://leoniedu.github.io/comexr/reference/comex_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Comexstat Data from MDIC (Brazilian Ministry of Development, Industry, Commerce, and Services) — comex_download","text":"years numeric vector integer specifying years data downloaded. Defaults current year. directions character vector specifying directions trade: 'imp' (imports) /'exp' (exports). Defaults . types character vector specifying types data: 'ncm' (Nomenclatura Comum Mercosul) /'hs4' (Harmonized System 4-digit). Defaults . cache logical value indicating whether use cached files exist. Defaults TRUE. .progress logical value indicating whether display progress bar downloads. Defaults TRUE. n_tries maximum number download attempts giving . Defaults 30. force_download_aux logical value indicating whether force download auxiliary data tables (e.g., URF, VIA, country codes), even already exist cache. Defaults FALSE. Auxiliary data typically downloaded new trade data file downloaded. timeout maximum time (seconds) wait download response. Defaults 600 seconds (10 minutes). ... Additional arguments passed curl::multi_download, headers, handle, etc.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Comexstat Data from MDIC (Brazilian Ministry of Development, Industry, Commerce, and Services) — comex_download","text":"invisible(NULL) successful. function primarily downloads data specified directories.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_download.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download Comexstat Data from MDIC (Brazilian Ministry of Development, Industry, Commerce, and Services) — comex_download","text":"function performs following steps: File Structure: Ensures necessary directories exist store downloaded files. URL Generation: Constructs URLs Comexstat data files based specified years, directions, types. Download (Retry): Downloads files using curl::multi_download retry logic case failures. Auxiliary Data: new trade data force_download_aux TRUE, downloads manages auxiliary data tables. Error Handling: Checks downloads failed downloaded files valid. Write parquet files: Stores data parquet files order speed analyses.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Comexstat Data from MDIC (Brazilian Ministry of Development, Industry, Commerce, and Services) — comex_download","text":"","code":"if (FALSE) { # \\dontrun{ # Download all data for 2023 and 2024 comex_download(years = 2023:2024)  # Download only import data (NCM) for 2024 comex_download(years = 2024, directions = 'imp', types = 'ncm') } # }"},{"path":"https://leoniedu.github.io/comexr/reference/comex_hs4.html","id":null,"dir":"Reference","previous_headings":"","what":"Open ComexStat HS4 Trade Dataset — comex_hs4","title":"Open ComexStat HS4 Trade Dataset — comex_hs4","text":"function opens ComexStat HS4 trade data Arrow Dataset. data assumed located ComexStat data directory downloaded using comex_download() function.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_hs4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open ComexStat HS4 Trade Dataset — comex_hs4","text":"","code":"comex_hs4()"},{"path":"https://leoniedu.github.io/comexr/reference/comex_hs4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open ComexStat HS4 Trade Dataset — comex_hs4","text":"Arrow Dataset containing combined import export HS4 trade data. dataset following columns: year: Year (integer) month: Month (integer) hs4: 4-digit HS product code (integer) country_code: Country code (integer) state: Brazilian state abbreviation (string) mun_code: Municipality code (integer) kg_net: Net weight kilograms (integer64) fob_usd: FOB value US dollars (integer64) direction: Trade direction, either 'exp' (export) 'imp' (import)","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_hs4.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Open ComexStat HS4 Trade Dataset — comex_hs4","text":"function reads HS4 parquet files user data directory.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_hs4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open ComexStat HS4 Trade Dataset — comex_hs4","text":"","code":"if (FALSE) { # \\dontrun{ # Open the ComexStat HS4 dataset: hs4_dataset <- comexstat_hs4()  } # }"},{"path":"https://leoniedu.github.io/comexr/reference/comex_ncm.html","id":null,"dir":"Reference","previous_headings":"","what":"Open ComexStat NCM Trade Dataset — comex_ncm","title":"Open ComexStat NCM Trade Dataset — comex_ncm","text":"function opens ComexStat NCM (8-digit product code) trade data Arrow Dataset. data assumed located  ComexStat data directory downloaded processed using comex_download() function.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_ncm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open ComexStat NCM Trade Dataset — comex_ncm","text":"","code":"comex_ncm()"},{"path":"https://leoniedu.github.io/comexr/reference/comex_ncm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open ComexStat NCM Trade Dataset — comex_ncm","text":"Arrow Dataset containing combined import export NCM trade data, additional direction column indicating 'exp' (export) 'imp' (import). dataset following columns: year: Year (integer) month: Month (integer) ncm: 8-digit NCM product code (string) unit_code: Unit measurement code (integer) country_code: Country code (integer) state_abb: Brazilian state abbreviation (string) transp_mode_code: Transportation mode code (integer) urf_code: Customs clearance unit code (integer) qt_stat: Statistical quantity (integer64) kg_net: Net weight kilograms (integer64) fob_usd: FOB value US dollars (integer64) freight_usd: Freight value US dollars (integer64, imports) insurance_usd: Insurance value US dollars (integer64, imports) direction: Trade direction, either 'exp' (export) 'imp' (import) (derived)","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_ncm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open ComexStat NCM Trade Dataset — comex_ncm","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) # Open the ComexStat NCM dataset: ncm_dataset <- comex_ncm()  # Explore the dataset: print(ncm_dataset) ncm_dataset|>group_by(year, direction)|>summarise(fob_usd=sum(fob_usd), freight_usd=sum(freight_usd))|>mutate(p=freight_usd/fob_usd)|>collect() comex_ncm()|>group_by(country_code)|>summarise(fob_usd=sum(fob_usd, na.rm=TRUE), freight_usd=sum(freight_usd))|>mutate(p=freight_usd/fob_usd)|>arrange(desc(p))|>collect() } # }"},{"path":"https://leoniedu.github.io/comexr/reference/comex_roll.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Rolling Sums for Comex Data — comex_roll","title":"Calculate Rolling Sums for Comex Data — comex_roll","text":"function computes rolling sums specified window selected columns Comex (Brazilian trade) dataset. operates columns start specified prefixes.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_roll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Rolling Sums for Comex Data — comex_roll","text":"","code":"comex_roll(   data,   x = c(\"qt_stat\", \"kg_net\", \"fob_\", \"freight_\", \"insurance_\", \"cif_\"),   k = 12 )"},{"path":"https://leoniedu.github.io/comexr/reference/comex_roll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Rolling Sums for Comex Data — comex_roll","text":"data data frame tibble containing Comex data, date column. x character vector specifying prefixes column names calculate rolling sums. Defaults c('qt_stat', 'kg_net', 'fob_', 'freight_', 'insurance_', 'cif_'), captures common columns related quantities, weights, various costs. k integer specifying window size (months) rolling sum calculation. Defaults 12.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_roll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Rolling Sums for Comex Data — comex_roll","text":"modified version input data, new columns added selected column. new column names format 'original_col_name_k', k window size. new columns contain rolling sums corresponding original columns.  Rows incomplete windows (less k months data) NA values new columns.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_roll.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Rolling Sums for Comex Data — comex_roll","text":"function uses slider package's slide_index_dbl function efficiently calculate rolling sums. rolling sum date calculated summing values current date k-1 months prior. Since .complete argument slide_index_dbl set TRUE, function calculate rolling sums dates least k months prior data available. Rows incomplete windows NA values.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_roll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Rolling Sums for Comex Data — comex_roll","text":"","code":"#' # Create sample Comex data set.seed(123) library(lubridate) #>  #> Attaching package: ‘lubridate’ #> The following objects are masked from ‘package:base’: #>  #>     date, intersect, setdiff, union library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union comex_data <- tibble::tibble(   date = rep(seq(from = ymd('2023-01-01'), to = ymd('2023-12-01'), by = 'month'), each=2),   direction=rep(c(\"imp\", \"exp\"), 12),   qt_stat = rpois(24, lambda = 100),   fob_usd = runif(24, min = 500, max = 2000) ) # Example usage with default prefixes and window size of 12 months, grouped by direction: rolled_data <- comex_data%>%group_by(direction)%>%comex_roll()  # Calculate 2-month rolling sums for columns starting with 'qt_' and 'fob_', grouped by direction: rolled_data <- comex_roll(comex_data%>%group_by(direction), x = c('qt_', 'fob_'), k = 2) rolled_data%>%arrange(direction, date)%>%filter(date<=\"2023-03-01\") #> # A tibble: 6 × 6 #> # Groups:   direction [2] #>   date       direction qt_stat fob_usd qt_stat_2 fob_usd_2 #>   <date>     <chr>       <int>   <dbl>     <dbl>     <dbl> #> 1 2023-01-01 exp           111   1498.        NA       NA  #> 2 2023-02-01 exp           101   1076.       212     2574. #> 3 2023-03-01 exp           104   1722.       205     2798. #> 4 2023-01-01 imp            94   1062.        NA       NA  #> 5 2023-02-01 imp            83    642.       177     1704. #> 6 2023-03-01 imp           117    912.       200     1554."},{"path":"https://leoniedu.github.io/comexr/reference/comex_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Comex Data by Summing Columns with Matching Prefixes — comex_sum","title":"Aggregate Comex Data by Summing Columns with Matching Prefixes — comex_sum","text":"function aggregates Comex (Brazilian trade) dataset calculating sum columns whose names start specified prefixes.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Comex Data by Summing Columns with Matching Prefixes — comex_sum","text":"","code":"comex_sum(   data,   x = c(\"qt_stat\", \"kg_net\", \"fob_\", \"freight_\", \"insurance_\", \"cif_\") )"},{"path":"https://leoniedu.github.io/comexr/reference/comex_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Comex Data by Summing Columns with Matching Prefixes — comex_sum","text":"data data frame tibble containing Comex data. x character vector specifying column name prefixes match sum. Defaults c('qt_stat', 'kg_net', 'fob_', 'freight_', 'insurance_', 'cif_'), captures common columns related quantities, weights, various costs.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Comex Data by Summing Columns with Matching Prefixes — comex_sum","text":"tibble one row containing sum matched column. column names result input column names.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_sum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate Comex Data by Summing Columns with Matching Prefixes — comex_sum","text":"function simplifies process aggregating multiple related variables Comex data allowing specify prefixes instead listing column individually. example, default prefix 'fob_' match columns like fob_usd, fob_brl, etc., sum together.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/comex_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Comex Data by Summing Columns with Matching Prefixes — comex_sum","text":"","code":"# Create a sample Comex dataset comex_data <- data.frame(   qt_stat = c(100, 250, 80),   kg_net = c(5000, 12000, 3500),   fob_usd = c(15000, 38000, 10000),   fob_brl = c(75000, 190000, 50000),   freight_usd = c(2000, 5000, 1500)  # Additional column with 'fob_' prefix )  # Aggregate columns starting with default prefixes summary_data <- comex_sum(comex_data) summary_data #>   qt_stat kg_net fob_usd fob_brl freight_usd #> 1     430  20500   63000  315000        8500  # Aggregate only columns starting with 'qt_' and 'fob_' summary_data <- comex_sum(comex_data, x = c('qt_', 'fob_')) summary_data #>   qt_stat fob_usd fob_brl #> 1     430   63000  315000"},{"path":"https://leoniedu.github.io/comexr/reference/get_deflators.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USD) — get_deflators","title":"Download and processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USD) — get_deflators","text":"Download processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USD)","code":""},{"path":"https://leoniedu.github.io/comexr/reference/get_deflators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USD) — get_deflators","text":"","code":"get_deflators(updated = Sys.Date(), na_omit = FALSE)"},{"path":"https://leoniedu.github.io/comexr/reference/get_deflators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USD) — get_deflators","text":"updated","code":""},{"path":"https://leoniedu.github.io/comexr/reference/get_deflators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and processes deflators (CPI/USA, IPCA/Brazil, Exchange rate BRL/USD) — get_deflators","text":"data frame columns date, ipca (monthly inflation Brazil), ipca_i (monthly inflation Brazil indexed 1997-01-01 1), cpi index (monthly inflation USA).","code":""},{"path":"https://leoniedu.github.io/comexr/reference/ncm.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize and Validate NCM Codes — ncm","title":"Standardize and Validate NCM Codes — ncm","text":"function cleans optionally validates NCM (Nomenclatura Comum Mercosul) codes.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/ncm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize and Validate NCM Codes — ncm","text":"","code":"ncm(x, nchar = 8, checkncm = TRUE)"},{"path":"https://leoniedu.github.io/comexr/reference/ncm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize and Validate NCM Codes — ncm","text":"x character vector containing NCM codes. checkncm logical flag indicating whether perform NCM validation. Defaults TRUE.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/ncm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize and Validate NCM Codes — ncm","text":"character vector cleaned NCM codes. Non-numeric characters removed. Empty strings converted NA. checkncm TRUE, error raised non-NA values exactly 8 characters.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/ncm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardize and Validate NCM Codes — ncm","text":"NCM codes standardized contain digits (0-9). important consistency data analysis comparison. optional validation step ensures cleaned NCM codes adhere expected format 8 digits.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/ncm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize and Validate NCM Codes — ncm","text":"","code":"# Clean and validate valid NCM codes ncm(c('01012100', '02011000', 'invalid code'))  # Raises an error due to 'invalid code' #> [1] \"01012100\" \"02011000\" NA          # Clean without validation ncm(c('01012100', '02011000', 'invalid code'), checkncm = FALSE) #> [1] \"01012100\" \"02011000\" NA         # Returns: c('01012100', '02011000', NA)"},{"path":"https://leoniedu.github.io/comexr/reference/ncms.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge and Format NCM Datasets from Comexstat — ncms","title":"Merge and Format NCM Datasets from Comexstat — ncms","text":"function retrieves multiple NCM (Nomenclatura Comum Mercosul) datasets comexstat package, merges single data frame, converts columns character format.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/ncms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge and Format NCM Datasets from Comexstat — ncms","text":"","code":"ncms(files = c(\"ncm\", \"ncm_cgce\", \"ncm_cuci\", \"ncm_isic\", \"ncm_unidade\"))"},{"path":"https://leoniedu.github.io/comexr/reference/ncms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge and Format NCM Datasets from Comexstat — ncms","text":"files character vector specifying names NCM datasets retrieve comexstat. Defaults c('ncm', 'ncm_cgce', 'ncm_cuci', 'ncm_isic', 'ncm_unidade').","code":""},{"path":"https://leoniedu.github.io/comexr/reference/ncms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge and Format NCM Datasets from Comexstat — ncms","text":"merged data frame containing specified NCM datasets, columns converted character format.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/ncms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge and Format NCM Datasets from Comexstat — ncms","text":"function streamlines process working multiple NCM datasets comexstat package. performs following steps: Retrieval: Retrieves specified NCM datasets using comex function. Merging: Combines retrieved datasets single data frame using left joins. Format Conversion: Converts columns merged data frame character format consistent data manipulation. function suppresses messages warnings retrieval merging steps provide cleaner output.","code":""},{"path":"https://leoniedu.github.io/comexr/reference/ncms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge and Format NCM Datasets from Comexstat — ncms","text":"","code":"if (FALSE) { # \\dontrun{ # Merge and format default NCM datasets merged_ncms <- ncms()  # Merge specific NCM datasets (e.g., only 'ncm' and 'ncm_cuci') merged_ncms <- ncms(files = c('ncm', 'ncm_cuci')) } # }"},{"path":[]},{"path":"https://leoniedu.github.io/comexr/news/index.html","id":"version-01","dir":"Changelog","previous_headings":"","what":"Version 0.1","title":"Version 0.1","text":"First release","code":""}]
